// <auto-generated />
using System;
using Kanriya.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kanriya.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250825001526_InitialBrandMigration")]
    partial class InitialBrandMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kanriya.Server.Data.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DatabaseUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("database_user");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("encrypted_password");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("owner_id");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("schema_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_brands_created_at");

                    b.HasIndex("DatabaseUser")
                        .IsUnique()
                        .HasDatabaseName("ix_brands_database_user");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_brands_is_active");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_brands_owner_id");

                    b.HasIndex("SchemaName")
                        .IsUnique()
                        .HasDatabaseName("ix_brands_schema_name");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("Kanriya.Server.Data.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<Guid>("EmailOutboxId")
                        .HasColumnType("uuid")
                        .HasColumnName("email_outbox_id");

                    b.HasKey("Id")
                        .HasName("pk_email_logs");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_email_logs_created_at");

                    b.HasIndex("EmailOutboxId")
                        .HasDatabaseName("ix_email_logs_email_outbox_id");

                    b.ToTable("email_logs", (string)null);
                });

            modelBuilder.Entity("Kanriya.Server.Data.EmailOutbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer")
                        .HasColumnName("attempts");

                    b.Property<string>("BccEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bcc_email");

                    b.Property<string>("CcEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cc_email");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FailedReason")
                        .HasColumnType("text")
                        .HasColumnName("failed_reason");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("from_email");

                    b.Property<string>("FromName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("from_name");

                    b.Property<string>("HtmlBody")
                        .HasColumnType("text")
                        .HasColumnName("html_body");

                    b.Property<DateTime?>("LastAttemptAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_attempt_at");

                    b.Property<string>("MailDriver")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mail_driver");

                    b.Property<int>("MaxAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3)
                        .HasColumnName("max_attempts");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5)
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_for");

                    b.Property<string>("SenderId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sender_id");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_type");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("subject");

                    b.Property<string>("TemplateData")
                        .HasColumnType("text")
                        .HasColumnName("template_data");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<string>("TextBody")
                        .HasColumnType("text")
                        .HasColumnName("text_body");

                    b.Property<string>("ToEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("to_email");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_email_outbox");

                    b.HasIndex("Priority")
                        .HasDatabaseName("ix_email_outbox_priority");

                    b.HasIndex("ScheduledFor")
                        .HasDatabaseName("ix_email_outbox_scheduled_for");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_email_outbox_status");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_email_outbox_template_id");

                    b.HasIndex("Status", "Priority", "ScheduledFor")
                        .HasDatabaseName("ix_email_outbox_processing");

                    b.ToTable("email_outbox", (string)null);
                });

            modelBuilder.Entity("Kanriya.Server.Data.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("DefaultFromEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("default_from_email");

                    b.Property<string>("DefaultFromName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("default_from_name");

                    b.Property<string>("HtmlBodyTemplate")
                        .HasColumnType("text")
                        .HasColumnName("html_body_template");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("SubjectTemplate")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("subject_template");

                    b.Property<string>("TextBodyTemplate")
                        .HasColumnType("text")
                        .HasColumnName("text_body_template");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_email_templates");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_email_templates_name");

                    b.ToTable("email_templates", (string)null);
                });

            modelBuilder.Entity("Kanriya.Server.Data.PendingUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("TokenExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expires_at");

                    b.Property<string>("VerificationToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("verification_token");

                    b.HasKey("Id")
                        .HasName("pk_pending_users");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("ix_pending_users_created_at");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_pending_users_email_unique");

                    b.HasIndex("TokenExpiresAt")
                        .HasDatabaseName("ix_pending_users_token_expires");

                    b.HasIndex("VerificationToken")
                        .IsUnique()
                        .HasDatabaseName("ix_pending_users_token_unique");

                    b.ToTable("pending_users", (string)null);
                });

            modelBuilder.Entity("Kanriya.Server.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_picture_url");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("ix_users_created_at");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email_unique");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Kanriya.Server.Data.UserMailSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApiDomain")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("api_domain");

                    b.Property<string>("ApiKey")
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<string>("ApiRegion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("api_region");

                    b.Property<string>("ApiSecret")
                        .HasColumnType("text")
                        .HasColumnName("api_secret");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DailyLimit")
                        .HasColumnType("integer")
                        .HasColumnName("daily_limit");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_enabled");

                    b.Property<DateTime?>("LastSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sent_at");

                    b.Property<string>("MailDriver")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mail_driver");

                    b.Property<int>("SentToday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sent_today");

                    b.Property<string>("SmtpEncryption")
                        .HasColumnType("text")
                        .HasColumnName("smtp_encryption");

                    b.Property<string>("SmtpFromEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("smtp_from_email");

                    b.Property<string>("SmtpFromName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("smtp_from_name");

                    b.Property<string>("SmtpHost")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("smtp_host");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("text")
                        .HasColumnName("smtp_password");

                    b.Property<int?>("SmtpPort")
                        .HasColumnType("integer")
                        .HasColumnName("smtp_port");

                    b.Property<string>("SmtpUsername")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("smtp_username");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_mail_settings");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_mail_settings_user_id");

                    b.ToTable("user_mail_settings", (string)null);
                });

            modelBuilder.Entity("Kanriya.Server.Data.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("assigned_by");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("AssignedAt")
                        .IsDescending()
                        .HasDatabaseName("ix_user_roles_assigned_at");

                    b.HasIndex("Role")
                        .HasDatabaseName("ix_user_roles_role");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.HasIndex("UserId", "Role")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_user_id_role_unique");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Kanriya.Server.Data.EmailLog", b =>
                {
                    b.HasOne("Kanriya.Server.Data.EmailOutbox", "EmailOutbox")
                        .WithMany()
                        .HasForeignKey("EmailOutboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_logs_email_outboxes_email_outbox_id");

                    b.Navigation("EmailOutbox");
                });

            modelBuilder.Entity("Kanriya.Server.Data.EmailOutbox", b =>
                {
                    b.HasOne("Kanriya.Server.Data.EmailTemplate", "Template")
                        .WithMany("EmailOutboxes")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_email_outbox_email_templates_template_id");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Kanriya.Server.Data.UserRole", b =>
                {
                    b.HasOne("Kanriya.Server.Data.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kanriya.Server.Data.EmailTemplate", b =>
                {
                    b.Navigation("EmailOutboxes");
                });

            modelBuilder.Entity("Kanriya.Server.Data.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
