@namespace Kanriya.Server.Blazor.Dialogs
@inject BlazorLocalizationService L
@inject IBrandService BrandService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IUserService UserService
@inject ICredentialManager CredentialManager
@inject SimpleAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation
@using Kanriya.Server.Blazor.Services
@using Kanriya.Server.Services.Data
@using Kanriya.Shared.Models
@using Kanriya.Server.Data
@using MudBlazorSeverity = MudBlazor.Severity
@using Microsoft.AspNetCore.Components.Authorization

<MudDialog>
    <DialogContent>
        @if (isResetting || isSigningIn)
        {
            <div style="display: flex; justify-content: center; padding: 2rem;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                @if (isSigningIn)
                {
                    <MudText Typo="Typo.body1" Class="ml-3">@L.T("Blazor.console.brandCredentials.signingIn")</MudText>
                }
            </div>
        }
        else if (newCredentials != null)
        {
            <MudAlert Severity="MudBlazorSeverity.Success" Class="mb-4">
                @L.T("Blazor.console.brandCredentials.resetSuccess")
            </MudAlert>
            
            <div style="margin-bottom: 1rem;">
                <MudText Typo="Typo.caption">@L.T("Blazor.console.brandCredentials.brandName")</MudText>
                <MudTextField Value="@Brand.Name" 
                              ReadOnly="true" 
                              Variant="Variant.Outlined" 
                              Margin="Margin.Dense" />
            </div>
            
            <div style="margin-bottom: 1rem;">
                <MudText Typo="Typo.caption">@L.T("Blazor.console.brandCredentials.brandId")</MudText>
                <MudTextField Value="@Brand.Id.ToString()" 
                              ReadOnly="true" 
                              Variant="Variant.Outlined" 
                              Margin="Margin.Dense"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.ContentCopy"
                              OnAdornmentClick="() => CopyToClipboard(Brand.Id.ToString())" />
            </div>
            
            <div style="margin-bottom: 1rem;">
                <MudText Typo="Typo.caption">@L.T("Blazor.console.brandCredentials.apiKey")</MudText>
                <MudTextField Value="@newCredentials.ApiKey" 
                              ReadOnly="true" 
                              Variant="Variant.Outlined" 
                              Margin="Margin.Dense"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.ContentCopy"
                              OnAdornmentClick="() => CopyToClipboard(newCredentials.ApiKey)" />
            </div>
            
            <div style="margin-bottom: 1rem;">
                <MudText Typo="Typo.caption">@L.T("Blazor.console.brandCredentials.apiPassword")</MudText>
                <MudTextField Value="@(showPassword ? newCredentials.ApiPassword : new string('●', 16))" 
                              ReadOnly="true" 
                              Variant="Variant.Outlined" 
                              Margin="Margin.Dense"
                              Adornment="Adornment.End"
                              AdornmentIcon="@(showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                              OnAdornmentClick="() => showPassword = !showPassword" />
            </div>
            
            <MudAlert Severity="MudBlazorSeverity.Warning" Icon="@Icons.Material.Filled.Warning" Class="mt-3">
                @L.T("Blazor.console.brandCredentials.security")
            </MudAlert>
        }
        else
        {
            <MudAlert Severity="MudBlazorSeverity.Info" Class="mb-4">
                @L.T("Blazor.console.brandCredentials.resetInfo")
            </MudAlert>
            
            <div style="margin-bottom: 1rem;">
                <MudText Typo="Typo.caption">@L.T("Blazor.console.brandCredentials.brandName")</MudText>
                <MudTextField Value="@Brand.Name" 
                              ReadOnly="true" 
                              Variant="Variant.Outlined" 
                              Margin="Margin.Dense" />
            </div>
            
            <div style="margin-bottom: 1rem;">
                <MudText Typo="Typo.caption">@L.T("Blazor.console.brandCredentials.brandId")</MudText>
                <MudTextField Value="@Brand.Id.ToString()" 
                              ReadOnly="true" 
                              Variant="Variant.Outlined" 
                              Margin="Margin.Dense"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.ContentCopy"
                              OnAdornmentClick="() => CopyToClipboard(Brand.Id.ToString())" />
            </div>
            
            <MudAlert Severity="MudBlazorSeverity.Warning" Icon="@Icons.Material.Filled.Warning" Class="mt-3">
                @L.T("Blazor.console.brandCredentials.resetWarning")
            </MudAlert>
        }
    </DialogContent>
    
    <DialogActions>
        @if (newCredentials == null && !isResetting)
        {
            <MudButton OnClick="Cancel">@L.T("Blazor.console.common.cancel")</MudButton>
            <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="ResetCredentials">
                @L.T("Blazor.console.brandCredentials.resetButton")
            </MudButton>
        }
        else if (newCredentials != null && !isSigningIn)
        {
            <MudButton OnClick="Cancel">@L.T("Blazor.console.common.close")</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SignInWithBrandCredential">
                @L.T("Blazor.console.brandCredentials.signInWithCredentials")
            </MudButton>
        }
        else
        {
            <MudButton OnClick="Cancel" Disabled="isSigningIn">@L.T("Blazor.console.common.close")</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    
    [Parameter] public Brand Brand { get; set; } = default!;
    
    private bool isResetting = false;
    private bool showPassword = false;
    private bool isSigningIn = false;
    private BrandCredentials? newCredentials;
    private string? currentUserId;
    
    public class BrandCredentials
    {
        public string ApiKey { get; set; } = "";
        public string ApiPassword { get; set; } = "";
    }
    
    protected override async Task OnInitializedAsync()
    {
        L.Initialize();
        
        // Get current user ID
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    }
    
    private async Task ResetCredentials()
    {
        isResetting = true;
        StateHasChanged();
        
        try
        {
            // Get current auth context
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var tokenType = authState.User.FindFirst("token_type")?.Value;
            
            string? userId = null;
            string? brandUserId = null;
            
            if (string.IsNullOrEmpty(tokenType) || tokenType != "BRAND")
            {
                // Principal context
                userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                if (string.IsNullOrEmpty(userId))
                {
                    Snackbar.Add(L.T("Blazor.console.brandCredentials.notAuthenticated"), MudBlazorSeverity.Error);
                    MudDialog.Cancel();
                    return;
                }
            }
            else
            {
                // Brand context - user can reset their own brand
                brandUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                var brandId = authState.User.FindFirst("brand_id")?.Value;
                
                // Ensure it's the same brand
                if (brandId != Brand.Id.ToString())
                {
                    Snackbar.Add("Cannot reset credentials for a different brand", MudBlazorSeverity.Error);
                    MudDialog.Cancel();
                    return;
                }
            }
            
            // Reset the brand credentials
            var (success, message, apiKey, apiPassword) = await BrandService.ResetBrandCredentialsAsync(
                userId,
                Brand.Id.ToString(),
                brandUserId);
            
            if (success && !string.IsNullOrEmpty(apiKey) && !string.IsNullOrEmpty(apiPassword))
            {
                newCredentials = new BrandCredentials
                {
                    ApiKey = apiKey,
                    ApiPassword = apiPassword
                };
                Snackbar.Add(L.T("Blazor.console.brandCredentials.resetSuccess"), MudBlazorSeverity.Success);
            }
            else
            {
                Snackbar.Add(message, MudBlazorSeverity.Error);
                MudDialog.Cancel();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", MudBlazorSeverity.Error);
            MudDialog.Cancel();
        }
        finally
        {
            isResetting = false;
            StateHasChanged();
        }
    }
    
    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            try
            {
                var success = await JSRuntime.InvokeAsync<bool>("clipboardFunctions.copyToClipboard", text);
                if (success)
                {
                    Snackbar.Add(L.T("Blazor.console.brandCredentials.copied"), MudBlazorSeverity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to copy to clipboard", MudBlazorSeverity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Copy failed: {ex.Message}", MudBlazorSeverity.Error);
            }
        }
    }
    
    private async Task SignInWithBrandCredential()
    {
        if (newCredentials == null || string.IsNullOrEmpty(newCredentials.ApiKey) || string.IsNullOrEmpty(newCredentials.ApiPassword))
        {
            Snackbar.Add("Missing credentials", MudBlazorSeverity.Error);
            return;
        }
        
        isSigningIn = true;
        StateHasChanged();
        
        try
        {
            // Sign in with brand context using API credentials
            var options = new RequestOptions
            {
                Lang = L.CurrentLanguage ?? "en",
                SkipEmail = false
            };
            
            var result = await UserService.SignInAsync(
                newCredentials.ApiKey,      // Use API key as username
                newCredentials.ApiPassword, // Use API password as password
                Brand.Id.ToString(),        // Pass brand ID for brand context
                options
            );
            
            if (result.Success && !string.IsNullOrEmpty(result.Token))
            {
                // Mark user as authenticated
                await AuthStateProvider.MarkUserAsAuthenticated(result.Token);
                
                // Get current user's email for the credential (for display purposes)
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var email = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? "";
                
                // Store the brand credential
                var brandCredential = new StoredCredential
                {
                    Type = "brand",
                    DisplayName = Brand.Name,
                    Email = email,
                    BrandName = Brand.Name,
                    BrandId = Brand.Id.ToString(),
                    ApiKey = newCredentials.ApiKey,
                    ApiPassword = newCredentials.ApiPassword,
                    Token = result.Token,
                    IsActive = true
                };
                await CredentialManager.AddCredentialAsync(brandCredential);
                
                // Switch to the new credential
                await CredentialManager.SwitchCredentialAsync(brandCredential.Id);
                
                Snackbar.Add(L.T("Blazor.console.brandCredentials.signedInWithCredentials"), MudBlazorSeverity.Success);
                
                // Close dialog and navigate to console
                MudDialog.Close(DialogResult.Ok(true));
                Navigation.NavigateTo("/console", forceLoad: true);
            }
            else
            {
                Snackbar.Add(result.Message ?? "Sign in failed", MudBlazorSeverity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error signing in: {ex.Message}", MudBlazorSeverity.Error);
        }
        finally
        {
            isSigningIn = false;
            StateHasChanged();
        }
    }
    
    private void Cancel() => MudDialog.Cancel();
}