@namespace Kanriya.Server.Blazor.Dialogs
@inject ICredentialManager CredentialManager
@inject BlazorLocalizationService L
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Kanriya.Server.Blazor.Services

<MudDialog>
    <DialogContent>
        @if (isLoading)
        {
            <div style="display: flex; justify-content: center; padding: 2rem;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (!credentials.Any())
        {
            <MudAlert Severity="Severity.Info" Class="ma-4">
                @L.T("Blazor.console.credentials.noStoredCredentials")
            </MudAlert>
        }
        else
        {
            <MudTable Items="@credentials" Hover="true" Striped="true" Dense="true">
                <HeaderContent>
                    <MudTh>@L.T("Blazor.console.credentials.account")</MudTh>
                    <MudTh>@L.T("Blazor.console.credentials.type")</MudTh>
                    <MudTh>@L.T("Blazor.console.credentials.lastUsed")</MudTh>
                    <MudTh>@L.T("Blazor.console.credentials.status")</MudTh>
                    <MudTh Style="text-align: right;">@L.T("Blazor.console.credentials.actions")</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <div class="d-flex align-center">
                            <MudAvatar Color="@(context.IsActive ? Color.Primary : Color.Surface)" Size="Size.Small" Class="mr-2">
                                @GetInitials(context)
                            </MudAvatar>
                            <div>
                                <MudText Typo="Typo.body2">@context.DisplayName</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @(context.Type == "brand" ? context.BrandName : context.Email)
                                </MudText>
                            </div>
                        </div>
                    </MudTd>
                    <MudTd>
                        <MudChip T="string" Size="Size.Small" 
                                 Color="@(context.Type == "brand" ? Color.Info : Color.Default)">
                            @(context.Type == "brand" ? L.T("Blazor.console.credentials.brand") : L.T("Blazor.console.credentials.principal"))
                        </MudChip>
                    </MudTd>
                    <MudTd>
                        @if (context.LastUsedAt.HasValue)
                        {
                            <MudText Typo="Typo.caption">
                                @context.LastUsedAt.Value.ToLocalTime().ToString("g")
                            </MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @L.T("Blazor.console.credentials.neverUsed")
                            </MudText>
                        }
                    </MudTd>
                    <MudTd>
                        @if (context.IsActive)
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Success">
                                @L.T("Blazor.console.credentials.active")
                            </MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Default">
                                @L.T("Blazor.console.credentials.inactive")
                            </MudChip>
                        }
                    </MudTd>
                    <MudTd Style="text-align: right;">
                        <MudTooltip Text="@L.T("Blazor.console.credentials.makeActive")">
                            <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" 
                                           Color="Color.Success" 
                                           Size="Size.Small"
                                           Disabled="@context.IsActive"
                                           OnClick="() => MakeActive(context)" />
                        </MudTooltip>
                        <MudTooltip Text="@L.T("Blazor.console.credentials.remove")">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                           Color="Color.Error" 
                                           Size="Size.Small"
                                           Disabled="@(context.IsActive && credentials.Count == 1)"
                                           OnClick="() => RemoveCredential(context)" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
            </MudTable>
            
            <div class="pa-4">
                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                    @L.T("Blazor.console.credentials.storageInfo")
                </MudText>
                
                <MudDivider Class="my-3" />
                
                <div class="d-flex justify-space-between align-center">
                    <MudText Typo="Typo.body2">
                        @string.Format(L.T("Blazor.console.credentials.totalStored"), credentials.Count)
                    </MudText>
                    
                    <MudButton Color="Color.Error" 
                               Variant="Variant.Text"
                               StartIcon="@Icons.Material.Filled.DeleteForever"
                               OnClick="ClearAllCredentials"
                               Disabled="@(credentials.Count <= 1)">
                        @L.T("Blazor.console.credentials.clearAll")
                    </MudButton>
                </div>
            </div>
        }
    </DialogContent>
    
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">@L.T("Blazor.console.common.close")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    
    private List<StoredCredential> credentials = new();
    private bool isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        L.Initialize();
        await LoadCredentials();
    }
    
    private async Task LoadCredentials()
    {
        isLoading = true;
        
        try
        {
            credentials = await CredentialManager.GetAllCredentialsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading credentials: {ex.Message}", Severity.Error);
            credentials = new List<StoredCredential>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private string GetInitials(StoredCredential credential)
    {
        var name = credential.DisplayName;
        if (string.IsNullOrEmpty(name)) return "?";
        
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        return name.Length > 0 ? name[0].ToString().ToUpper() : "?";
    }
    
    private async Task MakeActive(StoredCredential credential)
    {
        try
        {
            await CredentialManager.SwitchCredentialAsync(credential.Id);
            await LoadCredentials();
            Snackbar.Add(L.T("Blazor.console.credentials.switchedTo") + " " + credential.DisplayName, Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error switching credential: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task RemoveCredential(StoredCredential credential)
    {
        var result = await DialogService.ShowMessageBox(
            L.T("Blazor.console.credentials.confirmRemove"),
            L.T("Blazor.console.credentials.confirmRemoveMessage") + " " + credential.DisplayName + "?",
            yesText: L.T("Blazor.console.common.remove"),
            cancelText: L.T("Blazor.console.common.cancel"));
            
        if (result == true)
        {
            try
            {
                await CredentialManager.RemoveCredentialAsync(credential.Id);
                await LoadCredentials();
                Snackbar.Add(L.T("Blazor.console.credentials.removed"), Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error removing credential: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private async Task ClearAllCredentials()
    {
        var result = await DialogService.ShowMessageBox(
            L.T("Blazor.console.credentials.confirmClearAll"),
            L.T("Blazor.console.credentials.confirmClearAllMessage"),
            yesText: L.T("Blazor.console.common.clearAll"),
            cancelText: L.T("Blazor.console.common.cancel"));
            
        if (result == true)
        {
            try
            {
                await CredentialManager.ClearAllCredentialsAsync();
                await LoadCredentials();
                Snackbar.Add(L.T("Blazor.console.credentials.clearedAll"), Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error clearing credentials: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private void Close() => MudDialog.Close(DialogResult.Ok(false));
}