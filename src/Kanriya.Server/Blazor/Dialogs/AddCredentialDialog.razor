@namespace Kanriya.Server.Blazor.Dialogs
@inject ICredentialManager CredentialManager
@inject BlazorLocalizationService L
@inject ISnackbar Snackbar
@inject IUserService UserService
@inject IBrandService BrandService
@using Kanriya.Server.Blazor.Services
@using Kanriya.Server.Services.Data
@using Kanriya.Shared.Models
@using FluentValidation
@using MudBlazorSeverity = MudBlazor.Severity

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="model" Validation="@validator.ValidateValue">
            <MudTextField T="string" 
                          @bind-Value="model.BrandId"
                          Label="@L.T("auth.brandId")"
                          HelperText="@L.T("auth.brandIdHelp")"
                          Variant="Variant.Outlined"
                          Required="true"
                          Immediate="true"
                          Class="mb-4" />
            
            <MudTextField T="string" 
                          @bind-Value="model.ApiKey"
                          Label="@L.T("auth.apiKey")"
                          Variant="Variant.Outlined"
                          Required="true"
                          Immediate="true"
                          Class="mb-4" />
            
            <MudTextField T="string" 
                          @bind-Value="model.ApiPassword"
                          Label="@L.T("auth.apiPassword")"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Required="true"
                          Immediate="true"
                          Class="mb-4" />
            
            <MudAlert Severity="MudBlazorSeverity.Info" Class="mb-4">
                @L.T("Blazor.console.credentials.brandContextDescription")
            </MudAlert>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="MudBlazorSeverity.Error" Class="mb-4">
                    @errorMessage
                </MudAlert>
            }
        </MudForm>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">@L.T("Blazor.console.common.cancel")</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="Submit"
                   Disabled="@isProcessing">
            @if (isProcessing)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            @L.T("Blazor.console.credentials.addBrandCredential")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    
    private MudForm? form;
    private bool isProcessing = false;
    private string? errorMessage;
    
    private BrandCredentialModel model = new();
    private BrandCredentialValidator validator = new();
    
    public class BrandCredentialModel
    {
        public string BrandId { get; set; } = "";
        public string ApiKey { get; set; } = "";
        public string ApiPassword { get; set; } = "";
    }
    
    public class BrandCredentialValidator : AbstractValidator<BrandCredentialModel>
    {
        public BrandCredentialValidator()
        {
            RuleFor(x => x.BrandId)
                .NotEmpty().WithMessage("Brand ID is required")
                .Matches(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
                .WithMessage("Invalid Brand ID format (should be a valid GUID)");
            
            RuleFor(x => x.ApiKey)
                .NotEmpty().WithMessage("API Key is required")
                .MinimumLength(10).WithMessage("API Key must be at least 10 characters");
            
            RuleFor(x => x.ApiPassword)
                .NotEmpty().WithMessage("API Password is required")
                .MinimumLength(10).WithMessage("API Password must be at least 10 characters");
        }
        
        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<BrandCredentialModel>
                .CreateWithOptions((BrandCredentialModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
    
    protected override void OnInitialized()
    {
        L.Initialize();
    }
    
    private async Task Submit()
    {
        isProcessing = true;
        errorMessage = null;
        
        try
        {
            // Validate form
            if (form != null)
            {
                await form.Validate();
                if (!form.IsValid)
                {
                    isProcessing = false;
                    return;
                }
            }
            
            // Authenticate with brand credentials
            var options = new RequestOptions
            {
                Lang = L.CurrentLanguage,
                SkipEmail = false
            };
            
            // Sign in with brand context - pass brandId as third parameter
            var result = await UserService.SignInAsync(
                model.ApiKey,      // API key as the first parameter (emailOrApiSecret)
                model.ApiPassword, // API password as the second parameter
                model.BrandId,     // Brand ID as the third parameter
                options
            );
            
            if (!result.Success || string.IsNullOrEmpty(result.Token))
            {
                errorMessage = result.Message ?? L.T("Blazor.console.credentials.invalidBrandCredentials");
                return;
            }
            
            // Try to get the brand name from the main brands table
            string displayName;
            string brandName;
            try
            {
                // First try to get from the main brands table
                var brand = await BrandService.GetBrandAsync(model.BrandId);
                if (brand != null && !string.IsNullOrEmpty(brand.Name))
                {
                    displayName = brand.Name;
                    brandName = brand.Name;
                }
                else
                {
                    // If we can't get the brand name, use a truncated version of the ID
                    displayName = TruncateBrandId(model.BrandId);
                    brandName = displayName;
                }
            }
            catch
            {
                // Fallback to truncated ID
                displayName = TruncateBrandId(model.BrandId);
                brandName = displayName;
            }
            
            // Generate a unique ID for this credential
            var credentialId = Guid.NewGuid().ToString();
            
            // Create the credential object with the authenticated token
            var credential = new StoredCredential
            {
                Id = credentialId,
                Type = "brand",
                DisplayName = displayName,
                Email = "", // Not used for brand credentials
                BrandName = brandName,
                BrandId = model.BrandId,
                ApiKey = model.ApiKey,
                ApiPassword = model.ApiPassword,
                Token = result.Token, // Store the authenticated token
                IsActive = false,
                AddedAt = DateTime.UtcNow,
                LastUsedAt = DateTime.UtcNow
            };
            
            // Add the credential to storage
            await CredentialManager.AddCredentialAsync(credential);
            Snackbar.Add(L.T("Blazor.console.credentials.brandCredentialAdded"), MudBlazorSeverity.Success);
            MudDialog.Close(DialogResult.Ok(credential));
            
            // Note: Once backend authentication is ready, replace the above with actual authentication
            // and only store the credential if authentication succeeds
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private void Cancel() => MudDialog.Cancel();
    
    private string TruncateBrandId(string brandId)
    {
        if (string.IsNullOrEmpty(brandId))
            return "";
            
        if (brandId.Length >= 8)
        {
            var first4 = brandId.Substring(0, 4);
            var last4 = brandId.Substring(brandId.Length - 4);
            return $"Brand [{first4}...{last4}]";
        }
        
        return $"Brand [{brandId}]";
    }
}