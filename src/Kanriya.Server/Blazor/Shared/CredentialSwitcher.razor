@namespace Kanriya.Server.Blazor.Shared
@inject ICredentialManager CredentialManager
@inject NavigationManager Navigation
@inject BlazorLocalizationService L
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SimpleAuthStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Authorization
@using Kanriya.Server.Blazor.Services
@using Kanriya.Server.Blazor.Dialogs
@using MudBlazor
@implements IDisposable

<div class="credential-switcher">
    @if (activeCredential != null)
    {
        <MudMenu Icon="@Icons.Material.Filled.AccountCircle" 
                 Color="Color.Inherit" 
                 AnchorOrigin="Origin.BottomRight" 
                 TransformOrigin="Origin.TopRight"
                 Class="credential-menu">
            <ActivatorContent>
                <MudButton Variant="Variant.Text" 
                           Color="Color.Inherit" 
                           StartIcon="@Icons.Material.Filled.AccountCircle"
                           EndIcon="@Icons.Material.Filled.ArrowDropDown"
                           Class="credential-button">
                    <div class="credential-display">
                        <span class="credential-name">@activeCredential.DisplayName</span>
                        <span class="credential-type">@GetCredentialTypeLabel(activeCredential)</span>
                    </div>
                </MudButton>
            </ActivatorContent>
            <ChildContent>
                <MudPaper Width="350px" Class="pa-2">
                    <!-- Current Account Section -->
                    <div class="current-account-section pa-3 mb-2">
                        <div class="d-flex align-center">
                            <MudAvatar Color="Color.Primary" Size="Size.Large">
                                @GetInitials(activeCredential)
                            </MudAvatar>
                            <div class="ml-3 flex-grow-1">
                                <MudText Typo="Typo.subtitle1" Class="font-weight-bold">
                                    @activeCredential.DisplayName
                                </MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @GetCredentialSubtitle(activeCredential)
                                </MudText>
                                <MudChip T="string" Size="Size.Small" Color="Color.Success" Class="mt-1">
                                    @L.T("Blazor.console.credentials.active")
                                </MudChip>
                            </div>
                        </div>
                    </div>
                    
                    <MudDivider Class="my-2" />
                    
                    <!-- Other Credentials -->
                    @if (otherCredentials.Any())
                    {
                        <MudText Typo="Typo.caption" Class="px-3 pb-2" Color="Color.Secondary">
                            @L.T("Blazor.console.credentials.switchAccount")
                        </MudText>
                        
                        @foreach (var credential in otherCredentials)
                        {
                            <MudMenuItem OnClick="() => SwitchCredential(credential.Id)" Class="credential-item">
                                <div class="d-flex align-center" style="width: 100%;">
                                    <MudAvatar Color="Color.Surface" Size="Size.Small">
                                        @GetInitials(credential)
                                    </MudAvatar>
                                    <div class="ml-3 flex-grow-1">
                                        <MudText Typo="Typo.body2">@credential.DisplayName</MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @GetCredentialSubtitle(credential)
                                        </MudText>
                                    </div>
                                    @if (credential.Type == "brand")
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Small" Color="Color.Secondary" />
                                    }
                                </div>
                            </MudMenuItem>
                        }
                        
                        <MudDivider Class="my-2" />
                    }
                    
                    <!-- Actions -->
                    <MudMenuItem OnClick="OpenAddCredentialDialog" Icon="@Icons.Material.Filled.Add">
                        @L.T("Blazor.console.credentials.addAccount")
                    </MudMenuItem>
                    
                    <MudMenuItem OnClick="OpenManageCredentialsDialog" Icon="@Icons.Material.Filled.ManageAccounts">
                        @L.T("Blazor.console.credentials.manageAccounts")
                    </MudMenuItem>
                    
                    <MudDivider Class="my-2" />
                    
                    <MudMenuItem OnClick="SignOutCurrent" Icon="@Icons.Material.Filled.Logout">
                        @L.T("Blazor.console.credentials.signOut")
                    </MudMenuItem>
                </MudPaper>
            </ChildContent>
        </MudMenu>
    }
    else
    {
        <MudText Color="Color.Inherit">@L.T("Blazor.console.credentials.loading")</MudText>
    }
</div>

<style>
    .credential-switcher {
        display: inline-flex;
        align-items: center;
    }
    
    .credential-button {
        text-transform: none !important;
    }
    
    .credential-display {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        text-align: left;
    }
    
    .credential-name {
        font-weight: 500;
    }
    
    .credential-type {
        font-size: 0.75rem;
        opacity: 0.8;
    }
    
    .current-account-section {
        background-color: var(--mud-palette-background-grey);
        border-radius: var(--mud-default-borderradius);
    }
    
    .credential-item:hover {
        background-color: var(--mud-palette-action-default-hover);
    }
</style>

@code {
    private StoredCredential? activeCredential;
    private List<StoredCredential> otherCredentials = new();
    
    protected override async Task OnInitializedAsync()
    {
        L.Initialize();
        await LoadCredentials();
        CredentialManager.OnCredentialChanged += HandleCredentialChanged;
    }
    
    private async Task LoadCredentials()
    {
        try
        {
            var allCredentials = await CredentialManager.GetAllCredentialsAsync();
            activeCredential = allCredentials.FirstOrDefault(c => c.IsActive);
            otherCredentials = allCredentials.Where(c => !c.IsActive).ToList();
            
            // If no active credential but we have stored ones, activate the first
            if (activeCredential == null && allCredentials.Any())
            {
                await CredentialManager.SwitchCredentialAsync(allCredentials.First().Id);
                activeCredential = allCredentials.First();
                otherCredentials = allCredentials.Skip(1).ToList();
            }
            
            // If still no credentials, check current auth state
            if (activeCredential == null)
            {
                await CheckCurrentAuthState();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading credentials: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task CheckCurrentAuthState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            // Extract user info from claims
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            var email = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
            var tokenType = authState.User.FindFirst("token_type")?.Value;
            var firstName = authState.User.FindFirst("FirstName")?.Value;
            var lastName = authState.User.FindFirst("LastName")?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                // Principal users have null or missing token_type claim
                var isPrincipal = string.IsNullOrEmpty(tokenType) || tokenType != "BRAND";
                
                // Build display name for principal users
                var principalDisplayName = "User Principal"; // Default fallback
                if (!string.IsNullOrEmpty(firstName) || !string.IsNullOrEmpty(lastName))
                {
                    principalDisplayName = $"{firstName} {lastName}".Trim();
                }
                else if (!string.IsNullOrEmpty(email))
                {
                    // If no name available, use email username part
                    principalDisplayName = email.Split('@')[0];
                }
                
                // Get the current auth token from localStorage
                string? currentToken = null;
                try
                {
                    currentToken = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "authToken");
                }
                catch
                {
                    // If we can't get the token, continue without it
                }
                
                var credential = new StoredCredential
                {
                    Type = isPrincipal ? "principal" : "brand",
                    DisplayName = isPrincipal ? principalDisplayName : "", // Use actual name for principal
                    Email = email ?? "",
                    Token = currentToken ?? "", // Store the current token
                    IsActive = true
                };
                
                if (!isPrincipal)
                {
                    var brandId = authState.User.FindFirst("brand_id")?.Value;
                    var brandName = authState.User.FindFirst("brand_name")?.Value;
                    credential.BrandId = brandId ?? "";
                    credential.BrandName = brandName ?? "Brand";
                    credential.DisplayName = brandName ?? "Brand";
                }
                else
                {
                    // For principal users, also avoid storing any brand-like data
                    credential.BrandId = "";
                    credential.BrandName = "";
                }
                
                await CredentialManager.AddCredentialAsync(credential);
                activeCredential = credential;
            }
        }
    }
    
    private string GetInitials(StoredCredential credential)
    {
        var name = credential.DisplayName;
        if (string.IsNullOrEmpty(name)) return "?";
        
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        return name.Length > 0 ? name[0].ToString().ToUpper() : "?";
    }
    
    private string GetCredentialTypeLabel(StoredCredential credential)
    {
        return credential.Type == "brand" 
            ? L.T("Blazor.console.credentials.brandContext")
            : L.T("Blazor.console.credentials.principalContext");
    }
    
    private string GetCredentialSubtitle(StoredCredential credential)
    {
        if (credential.Type == "brand")
        {
            return $"{L.T("Blazor.console.credentials.brand")}: {credential.BrandName}";
        }
        return credential.Email;
    }
    
    private async Task SwitchCredential(string credentialId)
    {
        try
        {
            await CredentialManager.SwitchCredentialAsync(credentialId);
            
            // Here you would typically re-authenticate with the new credential
            // For now, we'll just reload the page to trigger re-authentication
            Navigation.NavigateTo(Navigation.Uri, true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error switching credential: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task OpenAddCredentialDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<AddCredentialDialog>(
            L.T("Blazor.console.credentials.addBrandCredential"), 
            parameters, 
            options);
        
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await LoadCredentials();
        }
    }
    
    private async Task OpenManageCredentialsDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        
        var dialog = await DialogService.ShowAsync<ManageCredentialsDialog>(
            L.T("Blazor.console.credentials.manageAccounts"), 
            parameters, 
            options);
        
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await LoadCredentials();
        }
    }
    
    private async Task SignOutCurrent()
    {
        try
        {
            // Show confirmation dialog
            var parameters = new DialogParameters<ConfirmDialog>
            {
                { x => x.ContentText, L.T("Blazor.console.navigation.logoutConfirmMessage") },
                { x => x.ButtonText, L.T("Blazor.console.navigation.logoutConfirmButton") },
                { x => x.Color, Color.Error }
            };

            var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

            var dialog = await DialogService.ShowAsync<ConfirmDialog>(
                L.T("Blazor.console.navigation.logoutConfirmTitle"),
                parameters,
                options);
            
            var result = await dialog.Result;
            if (result?.Canceled ?? true)
            {
                return;
            }
            
            // Clear all stored credentials from local storage
            await CredentialManager.ClearAllCredentialsAsync();
            
            // Use the proper sign out method from SimpleAuthStateProvider
            await AuthStateProvider.MarkUserAsLoggedOut();
            
            // Navigate to sign in page
            Navigation.NavigateTo("/signin", true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error signing out: {ex.Message}", Severity.Error);
        }
    }
    
    private void HandleCredentialChanged()
    {
        InvokeAsync(async () =>
        {
            await LoadCredentials();
            StateHasChanged();
        });
    }
    
    public void Dispose()
    {
        CredentialManager.OnCredentialChanged -= HandleCredentialChanged;
    }
}