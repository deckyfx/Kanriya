@page "/console"
@namespace Kanriya.Server.Blazor.Pages.WebConsole
@layout AuthorizedLayout
@inject NavigationManager Navigation
@inject IBrandService BrandService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject BlazorLocalizationService L
@using Microsoft.AspNetCore.Components.Authorization
@using Kanriya.Server.Services.Data
@using Kanriya.Server.Blazor.Services
@using Kanriya.Server.Data
@using System.Web
@using Kanriya.Shared.Services
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                    <div>
                        <MudText Typo="Typo.h4">@L.T("Blazor.console.index.title")</MudText>
                        <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">
                            @L.T("Blazor.console.index.subtitle")
                        </MudText>
                    </div>
                    <MudButton 
                        Color="Color.Primary" 
                        Variant="Variant.Filled"
                        StartIcon="@Icons.Material.Filled.Add"
                        @onclick='() => Navigation.NavigateTo($"/console/create-brand{(string.IsNullOrEmpty(selectedLang) ? "" : $"?lang={selectedLang}")}")'>
                        @L.T("Blazor.console.index.createBrand")
                    </MudButton>
                </div>
                
                @if (isLoading)
                {
                    <div style="display: flex; justify-content: center; padding: 3rem;">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                }
                else if (brands == null || !brands.Any())
                {
                    <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Business" Class="mb-4">
                        @L.T("Blazor.console.index.noBrands")
                    </MudAlert>
                    
                    <div style="text-align: center; padding: 3rem;">
                        <MudIcon Icon="@Icons.Material.Filled.Business" 
                                 Size="Size.Large" 
                                 Style="font-size: 4rem; color: var(--mud-palette-text-disabled); margin-bottom: 1rem;" />
                        <MudText Typo="Typo.h6" Style="color: var(--mud-palette-text-secondary); margin-bottom: 0.5rem;">
                            @L.T("Blazor.console.index.noBrandsTitle")
                        </MudText>
                        <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-disabled); margin-bottom: 2rem;">
                            @L.T("Blazor.console.index.noBrandsDescription")
                        </MudText>
                        <MudButton 
                            Color="Color.Primary" 
                            Variant="Variant.Filled"
                            Size="Size.Large"
                            StartIcon="@Icons.Material.Filled.Add"
                            @onclick='() => Navigation.NavigateTo($"/console/create-brand{(string.IsNullOrEmpty(selectedLang) ? "" : $"?lang={selectedLang}")}")'>
                            @L.T("Blazor.console.index.createFirstBrand")
                        </MudButton>
                    </div>
                }
                else
                {
                    <MudGrid>
                        @foreach (var brand in brands)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudCard>
                                    <MudCardContent>
                                        <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                                            <MudIcon Icon="@Icons.Material.Filled.Business" 
                                                     Color="Color.Primary" 
                                                     Size="Size.Medium" 
                                                     Style="margin-right: 0.5rem;" />
                                            <MudText Typo="Typo.h6">@brand.Name</MudText>
                                        </div>
                                        <MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary);">
                                            @L.T("Blazor.console.index.brandId"): @brand.Id
                                        </MudText>
                                        <MudText Typo="Typo.caption" Style="color: var(--mud-palette-text-disabled); margin-top: 0.5rem;">
                                            @L.T("Blazor.console.index.createdAt"): @brand.CreatedAt.ToString("yyyy-MM-dd HH:mm")
                                        </MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Color="Color.Primary" Variant="Variant.Text">
                                            @L.T("Blazor.console.index.manage")
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Brand>? brands;
    private bool isLoading = true;
    private string? selectedLang;
    
    protected override async Task OnInitializedAsync()
    {
        // Extract language from query string
        var uri = new Uri(Navigation.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        
        if (!string.IsNullOrEmpty(query["lang"]))
        {
            selectedLang = query["lang"]!;
            LocalizationService.Instance.SetLanguage(selectedLang);
        }
        
        // Initialize localization
        L.Initialize();
        
        // Get current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        
        if (!string.IsNullOrEmpty(userId))
        {
            try
            {
                // Get user's brands
                brands = await BrandService.GetUserBrandsAsync(userId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading brands: {ex.Message}");
                brands = new List<Brand>();
            }
        }
        
        isLoading = false;
    }
}