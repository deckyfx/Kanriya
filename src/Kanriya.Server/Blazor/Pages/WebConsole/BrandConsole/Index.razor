@page "/console/brand"
@namespace Kanriya.Server.Blazor.Pages.WebConsole.BrandConsole
@layout BrandLayout
@inject NavigationManager Navigation
@inject IUserService UserService
@inject IBrandService BrandService
@inject BlazorLocalizationService L
@inject ICredentialManager CredentialManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Kanriya.Server.Services.Data
@using Kanriya.Server.Blazor.Services
@using Kanriya.Server.Data
@using Microsoft.AspNetCore.Components.Authorization
@using System.Web
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <!-- Welcome Section -->
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <MudGrid>
                <MudItem xs="12" md="8">
                    <MudText Typo="Typo.h4" Class="mb-2">
                        Welcome to @brandName Portal
                    </MudText>
                    <MudText Typo="Typo.body1" Color="Color.Secondary">
                        Manage your brand's operations, users, and settings from this dashboard.
                    </MudText>
                    <MudText Typo="Typo.caption" Class="mt-2">
                        Brand ID: @brandId
                    </MudText>
                </MudItem>
                <MudItem xs="12" md="4" Class="d-flex align-center justify-end">
                    <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary">
                        <MudButton 
                            StartIcon="@Icons.Material.Filled.Settings"
                            Href="/console/brand/settings">
                            Brand Settings
                        </MudButton>
                        <MudButton 
                            StartIcon="@Icons.Material.Filled.Pages"
                            Href="/console/brand/page2">
                            Page 2
                        </MudButton>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>
        
        <!-- Statistics Cards -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Primary" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.h5">@userCount</MudText>
                                <MudText Typo="Typo.caption">Total Users</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Api" Color="Color.Success" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.h5">@apiCallsToday</MudText>
                                <MudText Typo="Typo.caption">API Calls Today</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.WebAsset" Color="Color.Warning" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.h5">@activeWebhooks</MudText>
                                <MudText Typo="Typo.caption">Active Webhooks</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Storage" Color="Color.Info" Size="Size.Large" />
                            <div class="ml-3">
                                <MudText Typo="Typo.h5">@storageUsedGB GB</MudText>
                                <MudText Typo="Typo.caption">Storage Used</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        
        <!-- Quick Actions -->
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-3">Quick Actions</MudText>
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton 
                        Variant="Variant.Outlined" 
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.PersonAdd"
                        FullWidth="true"
                        Href="/console/brand/users/add">
                        Add User
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton 
                        Variant="Variant.Outlined" 
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.VpnKey"
                        FullWidth="true"
                        Href="/console/brand/api-keys">
                        Manage API Keys
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton 
                        Variant="Variant.Outlined" 
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.History"
                        FullWidth="true"
                        Href="/console/brand/api-logs">
                        View API Logs
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton 
                        Variant="Variant.Outlined" 
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.WebAsset"
                        FullWidth="true"
                        Href="/console/brand/webhooks">
                        Configure Webhooks
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
        
        <!-- Recent Activity -->
        <MudPaper Class="pa-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-3">Recent Activity</MudText>
            @if (isLoadingActivity)
            {
                <div class="d-flex justify-center pa-4">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </div>
            }
            else if (recentActivities == null || !recentActivities.Any())
            {
                <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Info">
                    No recent activity to display.
                </MudAlert>
            }
            else
            {
                <MudSimpleTable Hover="true" Striped="true">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Action</th>
                            <th>User</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var activity in recentActivities)
                        {
                            <tr>
                                <td>@activity.Timestamp.ToString("g")</td>
                                <td>
                                    <MudChip T="string" Size="Size.Small" Color="@GetActivityColor(activity.Type)">
                                        @activity.Type
                                    </MudChip>
                                </td>
                                <td>@activity.UserName</td>
                                <td>@activity.Description</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            }
        </MudPaper>
</MudContainer>

@code {
    private string? brandId;
    private string? brandName;
    private string? brandSchema;
    
    // Statistics
    private int userCount = 0;
    private int apiCallsToday = 0;
    private int activeWebhooks = 0;
    private decimal storageUsedGB = 0;
    
    // Recent Activity
    private bool isLoadingActivity = true;
    private List<ActivityItem>? recentActivities;
    
    public class ActivityItem
    {
        public DateTime Timestamp { get; set; }
        public string Type { get; set; } = "";
        public string UserName { get; set; } = "";
        public string Description { get; set; } = "";
    }
    
    protected override async Task OnInitializedAsync()
    {
        L.Initialize();
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var tokenType = authState.User.FindFirst("token_type")?.Value;
        
        // Must be brand context
        if (string.IsNullOrEmpty(tokenType) || tokenType != "BRAND")
        {
            // Redirect to main console if not in brand context
            Navigation.NavigateTo("/console");
            return;
        }
        
        brandId = authState.User.FindFirst("brand_id")?.Value;
        brandSchema = authState.User.FindFirst("brand_schema")?.Value;
        brandName = authState.User.FindFirst("brand_name")?.Value ?? "Brand";
        
        await LoadDashboardData();
    }
    
    private async Task LoadDashboardData()
    {
        try
        {
            // TODO: Load actual data from services
            // For now, using mock data
            await Task.Delay(500); // Simulate API call
            
            userCount = 12;
            apiCallsToday = 1543;
            activeWebhooks = 3;
            storageUsedGB = 2.4M;
            
            recentActivities = new List<ActivityItem>
            {
                new() { 
                    Timestamp = DateTime.Now.AddMinutes(-5), 
                    Type = "API Call", 
                    UserName = "api_user_1", 
                    Description = "GET /api/v1/users" 
                },
                new() { 
                    Timestamp = DateTime.Now.AddMinutes(-12), 
                    Type = "User Login", 
                    UserName = "john.doe", 
                    Description = "Successful login from 192.168.1.1" 
                },
                new() { 
                    Timestamp = DateTime.Now.AddMinutes(-25), 
                    Type = "Webhook", 
                    UserName = "System", 
                    Description = "Webhook triggered for user.created event" 
                },
                new() { 
                    Timestamp = DateTime.Now.AddHours(-1), 
                    Type = "Settings", 
                    UserName = "admin", 
                    Description = "Updated brand display name" 
                },
                new() { 
                    Timestamp = DateTime.Now.AddHours(-2), 
                    Type = "API Call", 
                    UserName = "api_user_2", 
                    Description = "POST /api/v1/data" 
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoadingActivity = false;
            StateHasChanged();
        }
    }
    
    private Color GetActivityColor(string type)
    {
        return type switch
        {
            "API Call" => Color.Primary,
            "User Login" => Color.Success,
            "Webhook" => Color.Warning,
            "Settings" => Color.Info,
            _ => Color.Default
        };
    }
}