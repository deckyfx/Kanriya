@page "/request-activation"
@namespace Kanriya.Server.Blazor.Pages
@layout EmptyLayout
@inject NavigationManager Navigation
@inject IUserService UserService
@using Kanriya.Server.Services.Data

<div style="min-height: 100vh; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center;">
    <div style="background: white; border-radius: 12px; padding: 3rem; box-shadow: 0 20px 40px rgba(0,0,0,0.1); max-width: 500px; width: 90%;">
        @if (isSuccess)
        {
            <div style="text-align: center;">
                <div style="font-size: 4rem; margin-bottom: 1rem;">âœ…</div>
                <h2 style="color: #333; margin: 1rem 0;">Activation Email Sent!</h2>
                <p style="color: #666; margin: 1rem 0; line-height: 1.6;">
                    We've sent an activation link to <strong>@email</strong>. Please check your email to activate your account.
                </p>
                <p style="color: #777; margin-top: 1rem; font-size: 0.9rem;">
                    Didn't receive the email? Check your spam folder or try again in a few minutes.
                </p>
                <a href="/signin" 
                   style="display: inline-block; padding: 0.75rem 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 6px; text-decoration: none; font-weight: 500; margin-top: 1.5rem;">
                    Go to Sign In
                </a>
            </div>
        }
        else
        {
            <div>
                <h2 style="color: #333; margin: 0 0 2rem 0; text-align: center;">Request Account Activation</h2>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div style="background: #fee; border: 1px solid #fcc; border-radius: 6px; padding: 1rem; margin-bottom: 1rem; color: #c33;">
                        @errorMessage
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(infoMessage))
                {
                    <div style="background: #e3f2fd; border: 1px solid #90caf9; border-radius: 6px; padding: 1rem; margin-bottom: 1rem; color: #1976d2;">
                        @infoMessage
                    </div>
                }
                
                <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                    @if (isMockMode)
                    {
                        <!-- Hidden field to persist mock mode through form submission -->
                        <input type="hidden" name="mock" value="true" />
                    }
                    @if (skipEmail)
                    {
                        <!-- Hidden field to persist skip-email through form submission -->
                        <input type="hidden" name="skip-email" value="true" />
                    }
                    
                    <div style="margin-bottom: 1.5rem;">
                        <label style="display: block; color: #555; margin-bottom: 0.5rem; font-weight: 500;">
                            Email Address
                        </label>
                        <input type="email" @bind="email" required
                               style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 6px; font-size: 1rem; box-sizing: border-box;"
                               placeholder="Enter your email address" 
                               disabled="@isSubmitting" />
                    </div>
                    
                    <button type="submit" disabled="@isSubmitting"
                            style="width: 100%; padding: 0.75rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 6px; font-size: 1rem; font-weight: 500; cursor: pointer; transition: opacity 0.2s; opacity: @(isSubmitting ? "0.7" : "1");">
                        @if (isSubmitting)
                        {
                            <span>Sending Activation Email...</span>
                        }
                        else
                        {
                            <span>Send Activation Email</span>
                        }
                    </button>
                </form>
                
                <p style="text-align: center; color: #777; margin-top: 1.5rem; font-size: 0.9rem;">
                    Already activated? <a href="/signin" style="color: #667eea; text-decoration: none;">Sign in</a>
                </p>
            </div>
        }
    </div>
</div>

@code {
    private string email = "";
    private string errorMessage = "";
    private string infoMessage = "";
    private bool isSubmitting = false;
    private bool isSuccess = false;
    private bool isMockMode = false;
    private bool skipEmail = false;

    protected override void OnInitialized()
    {
        // Check for query parameters
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        if (query["mock"] != null)
        {
            isMockMode = true;
            infoMessage = "Mock mode enabled - submissions will simulate success";
        }
        
        if (query["skip-email"] != null)
        {
            skipEmail = true;
            if (!string.IsNullOrEmpty(infoMessage))
                infoMessage += " | ";
            infoMessage += "Email sending disabled";
        }
    }

    private async Task HandleSubmit()
    {
        errorMessage = "";
        
        // Validate email
        if (string.IsNullOrEmpty(email))
        {
            errorMessage = "Please enter your email address.";
            return;
        }
        
        if (!email.Contains("@") || !email.Contains("."))
        {
            errorMessage = "Please enter a valid email address.";
            return;
        }
        
        isSubmitting = true;
        
        try
        {
            // Check for mock mode (from hidden field)
            if (isMockMode)
            {
                // Simulate delay
                await Task.Delay(1000);
                isSuccess = true;
                isSubmitting = false;
                return;
            }
            
            // Call UserService to request activation email
            var result = await UserService.ResendVerificationAsync(email, skipEmail);
            if (result.Success)
            {
                isSuccess = true;
            }
            else
            {
                errorMessage = result.Message ?? "Failed to send activation email. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again or contact support.";
            System.Console.WriteLine($"Request activation error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}