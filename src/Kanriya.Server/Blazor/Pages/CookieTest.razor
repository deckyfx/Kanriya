@page "/cookie-test"
@layout MainLayout
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>Cookie and Session Test</h3>

<div style="margin: 2rem 0; padding: 1rem; background: #f5f5f5; border-radius: 4px;">
    <h4>1. HTTP Cookie Test (Server-Side)</h4>
    
    <div style="margin: 1rem 0;">
        <label>Cookie Name:</label>
        <input @bind="cookieName" style="margin: 0 0.5rem; padding: 0.25rem;" />
        <label>Cookie Value:</label>
        <input @bind="cookieValue" style="margin: 0 0.5rem; padding: 0.25rem;" />
        <button @onclick="SetCookieServerSide" style="padding: 0.25rem 0.5rem;">Set Cookie (Server)</button>
    </div>
    
    <div style="margin: 1rem 0;">
        <button @onclick="ReadCookiesServerSide" style="padding: 0.25rem 0.5rem;">Read All Cookies (Server)</button>
    </div>
    
    @if (!string.IsNullOrEmpty(cookieReadResult))
    {
        <div style="margin: 1rem 0; padding: 0.5rem; background: white; border: 1px solid #ddd;">
            <strong>Server-Side Cookies:</strong>
            <pre>@cookieReadResult</pre>
        </div>
    }
</div>

<div style="margin: 2rem 0; padding: 1rem; background: #e3f2fd; border-radius: 4px;">
    <h4>2. JavaScript Cookie Test (Client-Side)</h4>
    
    <div style="margin: 1rem 0;">
        <button @onclick="SetCookieClientSide" style="padding: 0.25rem 0.5rem;">Set Cookie (JavaScript)</button>
        <button @onclick="ReadCookiesClientSide" style="padding: 0.25rem 0.5rem;">Read Cookies (JavaScript)</button>
    </div>
    
    @if (!string.IsNullOrEmpty(jsCookieResult))
    {
        <div style="margin: 1rem 0; padding: 0.5rem; background: white; border: 1px solid #ddd;">
            <strong>Client-Side Cookies:</strong>
            <pre>@jsCookieResult</pre>
        </div>
    }
</div>

<div style="margin: 2rem 0; padding: 1rem; background: #fff3e0; border-radius: 4px;">
    <h4>3. ASP.NET Core Session (Like PHP Sessions)</h4>
    
    <div style="margin: 1rem 0;">
        <label>Session Key:</label>
        <input @bind="sessionKey" style="margin: 0 0.5rem; padding: 0.25rem;" />
        <label>Session Value:</label>
        <input @bind="sessionValue" style="margin: 0 0.5rem; padding: 0.25rem;" />
        <button @onclick="async () => await SetSessionValue()" style="padding: 0.25rem 0.5rem;">Set Session Value</button>
    </div>
    
    <div style="margin: 1rem 0;">
        <button @onclick="async () => await GetSessionValue()" style="padding: 0.25rem 0.5rem;">Get Session Value</button>
        <button @onclick="async () => await GetAllSessionValues()" style="padding: 0.25rem 0.5rem;">Get All Session Keys</button>
        <button @onclick="async () => await ClearSession()" style="padding: 0.25rem 0.5rem;">Clear Session</button>
    </div>
    
    @if (!string.IsNullOrEmpty(sessionResult))
    {
        <div style="margin: 1rem 0; padding: 0.5rem; background: white; border: 1px solid #ddd;">
            <strong>Session Data:</strong>
            <pre>@sessionResult</pre>
        </div>
    }
    
    <p style="font-size: 12px; color: #666; margin-top: 1rem;">
        ℹ️ ASP.NET Core sessions work like PHP sessions - data is stored server-side, client only gets a session cookie ID.
    </p>
</div>

<div style="margin: 2rem 0; padding: 1rem; background: #f3e5f5; border-radius: 4px;">
    <h4>4. Connection Info</h4>
    <p><strong>Connection ID:</strong> @connectionId</p>
    <p><strong>Session ID:</strong> @sessionId</p>
    <p><strong>Request Headers:</strong></p>
    <pre style="background: white; padding: 0.5rem; overflow-x: auto;">@requestHeaders</pre>
</div>

@using Microsoft.AspNetCore.Http

@code {
    private string cookieName = "test-cookie";
    private string cookieValue = "test-value-123";
    private string cookieReadResult = "";
    private string jsCookieResult = "";
    
    private string sessionKey = "myKey";
    private string sessionValue = "myValue";
    private string sessionResult = "";
    
    private string connectionId = "";
    private string sessionId = "";
    private string requestHeaders = "";
    
    protected override async Task OnInitializedAsync()
    {
        // Get connection/session info
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            try
            {
                // Load session asynchronously to ensure it's available
                await httpContext.Session.LoadAsync();
                
                // Get ASP.NET Core session ID
                sessionId = httpContext.Session?.Id ?? "N/A";
                
                // Connection ID (SignalR)
                connectionId = httpContext.Connection?.Id ?? "N/A";
                
                // Request headers
                var headers = httpContext.Request.Headers
                    .Where(h => !h.Key.StartsWith("Cookie", StringComparison.OrdinalIgnoreCase))
                    .Select(h => $"{h.Key}: {string.Join(", ", h.Value)}")
                    .Take(10);
                requestHeaders = string.Join("\n", headers);
            }
            catch (Exception ex)
            {
                sessionId = $"Error: {ex.Message}";
            }
        }
    }
    
    private void SetCookieServerSide()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext?.Response != null && !httpContext.Response.HasStarted)
        {
            try
            {
                httpContext.Response.Cookies.Append(cookieName, cookieValue, new CookieOptions
                {
                    Expires = DateTimeOffset.UtcNow.AddDays(7),
                    HttpOnly = false, // Allow JavaScript access for testing
                    Secure = false, // For development
                    SameSite = SameSiteMode.Lax,
                    Path = "/console"
                });
                cookieReadResult = $"✅ Cookie '{cookieName}' set successfully (will appear after page reload)";
            }
            catch (Exception ex)
            {
                cookieReadResult = $"❌ Failed to set cookie: {ex.Message}\nResponse has started: {httpContext.Response.HasStarted}";
            }
        }
        else
        {
            cookieReadResult = "❌ Cannot set cookie - response has already started. Try using JavaScript method.";
        }
    }
    
    private void ReadCookiesServerSide()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext?.Request != null)
        {
            var cookies = httpContext.Request.Cookies
                .Select(c => $"{c.Key} = {c.Value}")
                .ToList();
                
            if (cookies.Any())
            {
                cookieReadResult = string.Join("\n", cookies);
            }
            else
            {
                cookieReadResult = "No cookies found";
            }
        }
    }
    
    private async Task SetCookieClientSide()
    {
        // Use a function expression instead of eval with return
        var script = $@"
            (function() {{
                document.cookie = '{cookieName}={cookieValue}; path=/console; max-age=604800; SameSite=Lax';
                return 'Cookie set via JavaScript: {cookieName}={cookieValue}';
            }})()
        ";
        jsCookieResult = await JS.InvokeAsync<string>("eval", script);
    }
    
    private async Task ReadCookiesClientSide()
    {
        // Use a function expression instead of eval with return
        var script = @"
            (function() {
                return document.cookie || 'No cookies found';
            })()
        ";
        jsCookieResult = await JS.InvokeAsync<string>("eval", script);
    }
    
    private async Task SetSessionValue()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext?.Session != null)
        {
            try
            {
                // Ensure session is loaded before using it
                await httpContext.Session.LoadAsync();
                
                // ASP.NET Core session stores strings and byte arrays
                httpContext.Session.SetString(sessionKey, sessionValue);
                await httpContext.Session.CommitAsync();
                
                sessionResult = $"✅ Set [{sessionKey}] = '{sessionValue}' in session {sessionId}";
            }
            catch (Exception ex)
            {
                sessionResult = $"❌ Failed to set session value: {ex.Message}";
            }
        }
        else
        {
            sessionResult = "❌ Session not available";
        }
    }
    
    private async Task GetSessionValue()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext?.Session != null)
        {
            await httpContext.Session.LoadAsync();
            var value = httpContext.Session.GetString(sessionKey);
            if (value != null)
            {
                sessionResult = $"[{sessionKey}] = '{value}'";
            }
            else
            {
                sessionResult = $"Key '{sessionKey}' not found in session";
            }
        }
        else
        {
            sessionResult = "❌ Session not available";
        }
    }
    
    private async Task GetAllSessionValues()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext?.Session != null)
        {
            await httpContext.Session.LoadAsync();
            var keys = httpContext.Session.Keys.ToList();
            if (keys.Any())
            {
                var items = keys.Select(k => $"{k} = {httpContext.Session.GetString(k)}");
                sessionResult = $"Session Keys ({keys.Count}):\n{string.Join("\n", items)}";
            }
            else
            {
                sessionResult = "No data in session";
            }
        }
        else
        {
            sessionResult = "❌ Session not available";
        }
    }
    
    private async Task ClearSession()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext?.Session != null)
        {
            await httpContext.Session.LoadAsync();
            httpContext.Session.Clear();
            await httpContext.Session.CommitAsync();
            sessionResult = "✅ Session cleared";
        }
        else
        {
            sessionResult = "❌ Session not available";
        }
    }
}