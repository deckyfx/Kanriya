@page "/admin"
@namespace Kanriya.Server.Blazor.Pages.AdminConsole
@layout AdminLayout
@inject NavigationManager Navigation
@inject IUserService UserService
@inject IBrandService BrandService
@inject BlazorLocalizationService L
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Kanriya.Server.Services.Data
@using Kanriya.Server.Blazor.Services
@using Kanriya.Server.Data
@using Kanriya.Server.Constants
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = UserRoles.SuperAdmin)]

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Welcome Section -->
    <MudPaper Class="pa-4 mb-4" Elevation="3" Style="background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%); border-left: 4px solid var(--mud-palette-error);">
        <MudGrid>
            <MudItem xs="12" md="8">
                <MudText Typo="Typo.h4" Class="mb-2" Style="color: #991b1b;">
                    <MudIcon Icon="@Icons.Material.Filled.Security" Style="vertical-align: middle; margin-right: 8px;" />
                    System Administration Dashboard
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">
                    Complete system control and monitoring. Manage users, brands, security, and system configuration.
                </MudText>
                <MudText Typo="Typo.caption" Class="mt-2">
                    Logged in as: @userName | Role: SuperAdmin
                </MudText>
            </MudItem>
            <MudItem xs="12" md="4" Class="d-flex align-center justify-end">
                <MudButtonGroup Variant="Variant.Filled" Color="Color.Error">
                    <MudButton StartIcon="@Icons.Material.Filled.People" Href="/admin/users">
                        Manage Users
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Business" Href="/admin/brands">
                        Manage Brands
                    </MudButton>
                </MudButtonGroup>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <!-- System Statistics Cards -->
    <MudText Typo="Typo.h6" Class="mb-3">System Overview</MudText>
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Primary" Size="Size.Large" />
                        <div class="ml-3">
                            <MudText Typo="Typo.h4">@totalUsers</MudText>
                            <MudText Typo="Typo.caption">Total Users</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Success">
                                @superAdminCount SuperAdmins
                            </MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Business" Color="Color.Success" Size="Size.Large" />
                        <div class="ml-3">
                            <MudText Typo="Typo.h4">@totalBrands</MudText>
                            <MudText Typo="Typo.caption">Total Brands</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Info">
                                @activeBrands Active
                            </MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Token" Color="Color.Warning" Size="Size.Large" />
                        <div class="ml-3">
                            <MudText Typo="Typo.h4">@activeSessions</MudText>
                            <MudText Typo="Typo.caption">Active Sessions</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Warning">
                                @activeToday Today
                            </MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Storage" Color="Color.Info" Size="Size.Large" />
                        <div class="ml-3">
                            <MudText Typo="Typo.h4">@dbSize GB</MudText>
                            <MudText Typo="Typo.caption">Database Size</MudText>
                            <MudText Typo="Typo.caption" Color="@(dbUsagePercent > 80 ? Color.Error : Color.Success)">
                                @dbUsagePercent% Used
                            </MudText>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    
    <!-- Critical Actions -->
    <MudText Typo="Typo.h6" Class="mb-3">Critical Actions</MudText>
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudButton 
                    Variant="Variant.Outlined" 
                    Color="Color.Error"
                    StartIcon="@Icons.Material.Filled.PersonAdd"
                    FullWidth="true"
                    Href="/admin/users/add">
                    Add SuperAdmin
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudButton 
                    Variant="Variant.Outlined" 
                    Color="Color.Error"
                    StartIcon="@Icons.Material.Filled.Block"
                    FullWidth="true"
                    Href="/admin/security/block-ip">
                    Block IP Address
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudButton 
                    Variant="Variant.Outlined" 
                    Color="Color.Error"
                    StartIcon="@Icons.Material.Filled.CleaningServices"
                    FullWidth="true"
                    OnClick="PurgeLogs">
                    Purge Old Logs
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudButton 
                    Variant="Variant.Outlined" 
                    Color="Color.Error"
                    StartIcon="@Icons.Material.Filled.Backup"
                    FullWidth="true"
                    OnClick="BackupDatabase">
                    Backup Database
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <!-- System Health -->
    <MudText Typo="Typo.h6" Class="mb-3">System Health</MudText>
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.subtitle1" Class="mb-3">Services Status</MudText>
                <MudList T="string">
                    <MudListItem Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                        Database Connection: <strong>Healthy</strong>
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                        Mail Service: <strong>Operational</strong>
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                        Background Jobs: <strong>Running</strong>
                    </MudListItem>
                    <MudListItem Icon="@(cacheHealthy ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Warning)" 
                                 IconColor="@(cacheHealthy ? Color.Success : Color.Warning)">
                        Cache Service: <strong>@(cacheHealthy ? "Healthy" : "Degraded")</strong>
                    </MudListItem>
                </MudList>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.subtitle1" Class="mb-3">Recent Security Events</MudText>
                @if (isLoadingEvents)
                {
                    <div class="d-flex justify-center pa-4">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                }
                else if (securityEvents == null || !securityEvents.Any())
                {
                    <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Info">
                        No recent security events
                    </MudAlert>
                }
                else
                {
                    <MudList T="string">
                        @foreach (var evt in securityEvents.Take(5))
                        {
                            <MudListItem Icon="@GetEventIcon(evt.Type)" IconColor="@GetEventColor(evt.Type)">
                                <div class="d-flex justify-space-between">
                                    <MudText Typo="Typo.body2">@evt.Description</MudText>
                                    <MudText Typo="Typo.caption">@evt.Timestamp.ToString("HH:mm")</MudText>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    
    <!-- Recent Activity -->
    <MudText Typo="Typo.h6" Class="mb-3">Recent Admin Activity</MudText>
    <MudPaper Class="pa-4" Elevation="2">
        @if (isLoadingActivity)
        {
            <div class="d-flex justify-center pa-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (adminActivities == null || !adminActivities.Any())
        {
            <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Info">
                No recent admin activity
            </MudAlert>
        }
        else
        {
            <MudSimpleTable Hover="true" Striped="true">
                <thead>
                    <tr>
                        <th>Time</th>
                        <th>Admin</th>
                        <th>Action</th>
                        <th>Target</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var activity in adminActivities)
                    {
                        <tr>
                            <td>@activity.Timestamp.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>@activity.AdminName</td>
                            <td>
                                <MudChip T="string" Size="Size.Small" Color="@GetActionColor(activity.Action)">
                                    @activity.Action
                                </MudChip>
                            </td>
                            <td>@activity.Target</td>
                            <td>
                                <MudIcon Icon="@(activity.Success ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)" 
                                         Color="@(activity.Success ? Color.Success : Color.Error)" 
                                         Size="Size.Small" />
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
    </MudPaper>
</MudContainer>

@code {
    private string? userName;
    private string? userId;
    
    // Statistics
    private int totalUsers = 0;
    private int superAdminCount = 0;
    private int totalBrands = 0;
    private int activeBrands = 0;
    private int activeSessions = 0;
    private int activeToday = 0;
    private decimal dbSize = 0;
    private int dbUsagePercent = 0;
    private bool cacheHealthy = true;
    
    // Activity
    private bool isLoadingActivity = true;
    private bool isLoadingEvents = true;
    private List<AdminActivity>? adminActivities;
    private List<SecurityEvent>? securityEvents;
    
    public class AdminActivity
    {
        public DateTime Timestamp { get; set; }
        public string AdminName { get; set; } = "";
        public string Action { get; set; } = "";
        public string Target { get; set; } = "";
        public bool Success { get; set; }
    }
    
    public class SecurityEvent
    {
        public DateTime Timestamp { get; set; }
        public string Type { get; set; } = "";
        public string Description { get; set; } = "";
    }
    
    protected override async Task OnInitializedAsync()
    {
        L.Initialize();
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var tokenType = authState.User.FindFirst("token_type")?.Value;
        
        // Must be principal context with SuperAdmin role
        if (!string.IsNullOrEmpty(tokenType) && tokenType == "BRAND")
        {
            // Redirect to console if in brand context
            Navigation.NavigateTo("/console");
            return;
        }
        
        if (!authState.User.IsInRole(UserRoles.SuperAdmin))
        {
            // Redirect to console if not SuperAdmin
            Navigation.NavigateTo("/console");
            return;
        }
        
        userName = authState.User.Identity?.Name ?? "Administrator";
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        
        await LoadDashboardData();
    }
    
    private async Task LoadDashboardData()
    {
        try
        {
            // TODO: Load actual data from services
            // For now, using mock data
            await Task.Delay(500); // Simulate API call
            
            totalUsers = 156;
            superAdminCount = 3;
            totalBrands = 42;
            activeBrands = 38;
            activeSessions = 89;
            activeToday = 67;
            dbSize = 12.4M;
            dbUsagePercent = 35;
            cacheHealthy = true;
            
            adminActivities = new List<AdminActivity>
            {
                new() { 
                    Timestamp = DateTime.Now.AddMinutes(-15), 
                    AdminName = userName ?? "Admin",
                    Action = "User Created", 
                    Target = "john.smith@example.com",
                    Success = true
                },
                new() { 
                    Timestamp = DateTime.Now.AddHours(-1), 
                    AdminName = "admin@kanriya.com", 
                    Action = "Brand Deleted", 
                    Target = "Inactive Brand XYZ",
                    Success = true
                },
                new() { 
                    Timestamp = DateTime.Now.AddHours(-2), 
                    AdminName = userName ?? "Admin", 
                    Action = "Role Assigned", 
                    Target = "user@example.com → BrandOwner",
                    Success = true
                },
                new() { 
                    Timestamp = DateTime.Now.AddHours(-3), 
                    AdminName = "admin@kanriya.com", 
                    Action = "IP Blocked", 
                    Target = "192.168.1.100",
                    Success = false
                },
                new() { 
                    Timestamp = DateTime.Now.AddHours(-5), 
                    AdminName = userName ?? "Admin", 
                    Action = "Config Updated", 
                    Target = "SMTP Settings",
                    Success = true
                }
            };
            
            securityEvents = new List<SecurityEvent>
            {
                new() { 
                    Timestamp = DateTime.Now.AddMinutes(-5),
                    Type = "Login",
                    Description = "SuperAdmin login from 192.168.1.1"
                },
                new() { 
                    Timestamp = DateTime.Now.AddMinutes(-30),
                    Type = "Failed",
                    Description = "Failed login attempt for admin@test.com"
                },
                new() { 
                    Timestamp = DateTime.Now.AddHours(-1),
                    Type = "Warning",
                    Description = "Multiple failed API attempts from 10.0.0.5"
                },
                new() { 
                    Timestamp = DateTime.Now.AddHours(-2),
                    Type = "Success",
                    Description = "Password reset for user@example.com"
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoadingActivity = false;
            isLoadingEvents = false;
            StateHasChanged();
        }
    }
    
    private Color GetActionColor(string action)
    {
        return action switch
        {
            "User Created" => Color.Success,
            "Brand Deleted" => Color.Error,
            "Role Assigned" => Color.Info,
            "IP Blocked" => Color.Warning,
            "Config Updated" => Color.Primary,
            _ => Color.Default
        };
    }
    
    private string GetEventIcon(string type)
    {
        return type switch
        {
            "Login" => Icons.Material.Filled.Login,
            "Failed" => Icons.Material.Filled.Error,
            "Warning" => Icons.Material.Filled.Warning,
            "Success" => Icons.Material.Filled.CheckCircle,
            _ => Icons.Material.Filled.Info
        };
    }
    
    private Color GetEventColor(string type)
    {
        return type switch
        {
            "Login" => Color.Success,
            "Failed" => Color.Error,
            "Warning" => Color.Warning,
            "Success" => Color.Success,
            _ => Color.Default
        };
    }
    
    private void PurgeLogs()
    {
        // TODO: Implement log purging
        Console.WriteLine("Purging old logs...");
    }
    
    private void BackupDatabase()
    {
        // TODO: Implement database backup
        Console.WriteLine("Backing up database...");
    }
}