@page "/reset-password"
@namespace Kanriya.Server.Blazor.Pages
@layout EmptyLayout
@inject NavigationManager Navigation
@inject IUserService UserService
@using Kanriya.Server.Services.Data
@using System.Web

<div style="min-height: 100vh; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center;">
    <div style="background: white; border-radius: 12px; padding: 3rem; box-shadow: 0 20px 40px rgba(0,0,0,0.1); max-width: 500px; width: 90%;">
        @if (string.IsNullOrEmpty(token))
        {
            <div style="text-align: center;">
                <div style="font-size: 4rem; margin-bottom: 1rem;">⚠️</div>
                <h2 style="color: #333; margin: 1rem 0;">Invalid Reset Link</h2>
                <p style="color: #666; margin: 1rem 0; line-height: 1.6;">
                    The password reset link is invalid or missing the required token.
                </p>
                <a href="/graphql" 
                   style="display: inline-block; padding: 0.75rem 2rem; background: #2196F3; color: white; border-radius: 6px; text-decoration: none; font-weight: 500; margin-top: 1rem;">
                    Request New Reset Link
                </a>
            </div>
        }
        else if (resetSuccess)
        {
            <div style="text-align: center;">
                <div style="font-size: 4rem; margin-bottom: 1rem;">✅</div>
                <h2 style="color: #333; margin: 1rem 0;">Password Reset Successfully!</h2>
                <p style="color: #666; margin: 1rem 0; line-height: 1.6;">
                    Your password has been changed successfully. You can now sign in with your new password.
                </p>
                <a href="/signin" 
                   style="display: inline-block; padding: 0.75rem 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 6px; text-decoration: none; font-weight: 500; margin-top: 1rem;">
                    Sign In
                </a>
            </div>
        }
        else
        {
            <div>
                <h2 style="color: #333; margin: 0 0 2rem 0; text-align: center;">Reset Your Password</h2>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div style="background: #fee; border: 1px solid #fcc; border-radius: 6px; padding: 1rem; margin-bottom: 1rem; color: #c33;">
                        @errorMessage
                    </div>
                }
                
                <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                    @if (isMockMode)
                    {
                        <!-- Hidden field to persist mock mode through form submission -->
                        <input type="hidden" name="mock" value="true" />
                    }
                    @if (skipEmail)
                    {
                        <!-- Hidden field to persist skip-email through form submission -->
                        <input type="hidden" name="skip-email" value="true" />
                    }
                    
                    <div style="margin-bottom: 1.5rem;">
                        <label style="display: block; color: #555; margin-bottom: 0.5rem; font-weight: 500;">
                            New Password
                        </label>
                        <input type="password" @bind="newPassword" required
                               style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 6px; font-size: 1rem; box-sizing: border-box;"
                               placeholder="Enter new password" />
                    </div>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <label style="display: block; color: #555; margin-bottom: 0.5rem; font-weight: 500;">
                            Confirm Password
                        </label>
                        <input type="password" @bind="confirmPassword" required
                               style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 6px; font-size: 1rem; box-sizing: border-box;"
                               placeholder="Confirm new password" />
                    </div>
                    
                    <button type="submit" disabled="@isSubmitting"
                            style="width: 100%; padding: 0.75rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 6px; font-size: 1rem; font-weight: 500; cursor: pointer; transition: opacity 0.2s;">
                        @if (isSubmitting)
                        {
                            <span>Resetting Password...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </button>
                </form>
                
                <p style="text-align: center; color: #777; margin-top: 1.5rem; font-size: 0.9rem;">
                    Remember your password? <a href="/signin" style="color: #667eea; text-decoration: none;">Sign in</a>
                </p>
            </div>
        }
    </div>
</div>

@code {
    private string? token = null;
    private string newPassword = "";
    private string confirmPassword = "";
    private string errorMessage = "";
    private bool isSubmitting = false;
    private bool resetSuccess = false;
    private bool isMockMode = false;
    private bool skipEmail = false;

    protected override void OnInitialized()
    {
        // Extract parameters from query string
        var uri = new Uri(Navigation.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        token = query["token"];
        
        // Check for mock parameter
        if (query["mock"] != null)
        {
            isMockMode = true;
            token = "mock-token"; // Set a token so the form shows
        }
        
        // Check for skip-email parameter
        if (query["skip-email"] != null)
        {
            skipEmail = true;
        }
    }

    private async Task HandleSubmit()
    {
        errorMessage = "";
        
        // Check for mock mode (from hidden field)
        if (isMockMode)
        {
            // Simulate a short delay
            isSubmitting = true;
            await Task.Delay(1000);
            resetSuccess = true;
            isSubmitting = false;
            return;
        }
        
        // Validate inputs
        if (string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
        {
            errorMessage = "Please fill in all fields.";
            return;
        }
        
        if (newPassword.Length < 6)
        {
            errorMessage = "Password must be at least 6 characters long.";
            return;
        }
        
        if (newPassword != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }
        
        isSubmitting = true;
        
        try
        {
            // Call UserService to reset password
            var result = await UserService.ResetPasswordAsync(token!, newPassword, skipEmail);
            if (result.Success)
            {
                resetSuccess = true;
            }
            else
            {
                errorMessage = result.Message ?? "Password reset failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again or contact support.";
            System.Console.WriteLine($"Password reset error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}