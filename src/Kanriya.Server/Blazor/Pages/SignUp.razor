@page "/signup"
@layout EmptyLayout
@inject NavigationManager Navigation
@inject IUserService UserService
@inject IJSRuntime JS
@inject SimpleAuthStateProvider AuthStateProvider
@using Kanriya.Server.Services.Data
@using Kanriya.Server.Blazor.Services
@using Kanriya.Shared.Models
@using Kanriya.Shared.Services
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Sign Up</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        @if (isSuccess)
        {
            <div style="text-align: center;">
                <div style="font-size: 4rem; margin-bottom: 1rem;">‚úÖ</div>
                <h2 style="color: #333; margin: 1rem 0;">@LocalizationService.Instance.t("auth.signUpSuccess")</h2>
                <p style="color: #666; margin: 1rem 0; line-height: 1.6;">
                    @LocalizationService.Instance.t("auth.activationEmailSent")
                </p>
                @if (!string.IsNullOrEmpty(model.Email))
                {
                    <p style="color: #555; margin: 1rem 0;">
                        <strong>@model.Email</strong>
                    </p>
                }
                <p style="color: #777; margin-top: 1rem; font-size: 0.9rem;">
                    @LocalizationService.Instance.t("auth.checkSpamFolder")
                </p>
                @if (skipEmail)
                {
                    <div style="background: #e3f2fd; border: 1px solid #90caf9; border-radius: 6px; padding: 1rem; margin: 1rem 0; color: #1976d2;">
                        @LocalizationService.Instance.t("auth.emailDisabledInfo")
                    </div>
                }
                <a href="/signin@(GetQueryString())" 
                   style="display: inline-block; padding: 0.75rem 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 6px; text-decoration: none; font-weight: 500; margin-top: 1.5rem;">
                    @LocalizationService.Instance.t("auth.goToSignIn")
                </a>
            </div>
        }
        else
        {
            <h2>@LocalizationService.Instance.t("auth.signUp")</h2>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }
            
            <EditForm Model="@model" OnSubmit="@HandleSignUp">
            
            @* Hidden fields for query parameters *@
            @if (mockMode)
            {
                <input type="hidden" name="mock" value="true" />
            }
            @if (skipEmail)
            {
                <input type="hidden" name="skipEmail" value="true" />
            }
            @if (!string.IsNullOrEmpty(selectedLang) && selectedLang != "en")
            {
                <input type="hidden" name="lang" value="@selectedLang" />
            }
            
            <div class="form-group">
                <label>@LocalizationService.Instance.t("auth.email")</label>
                <InputText @bind-Value="model.Email" class="form-control" placeholder="@LocalizationService.Instance.t("auth.email")" disabled="@isSubmitting" />
                @if (showValidation && string.IsNullOrEmpty(model.Email))
                {
                    <div class="validation-message">
                        @LocalizationService.Instance.t("validation.required").Replace("{field}", LocalizationService.Instance.t("auth.email"))
                    </div>
                }
                else if (showValidation && !IsValidEmail(model.Email))
                {
                    <div class="validation-message">
                        @LocalizationService.Instance.t("validation.email")
                    </div>
                }
            </div>
            
            <div class="form-group">
                <label>@LocalizationService.Instance.t("auth.password")</label>
                <div class="password-input-wrapper">
                    <InputText type="@(showPassword ? "text" : "password")" @bind-Value="model.Password" class="form-control" placeholder="@LocalizationService.Instance.t("auth.password")" disabled="@isSubmitting" />
                    <button type="button" class="password-toggle" @onclick="() => showPassword = !showPassword" disabled="@isSubmitting">
                        @if (showPassword)
                        {
                            <span>üëÅÔ∏è</span>
                        }
                        else
                        {
                            <span>üëÅÔ∏è‚Äçüó®Ô∏è</span>
                        }
                    </button>
                </div>
                @if (showValidation && string.IsNullOrEmpty(model.Password))
                {
                    <div class="validation-message">
                        @LocalizationService.Instance.t("validation.required").Replace("{field}", LocalizationService.Instance.t("auth.password"))
                    </div>
                }
                else if (showValidation && model.Password.Length < 8)
                {
                    <div class="validation-message">
                        @LocalizationService.Instance.t("validation.min").Replace("{field}", LocalizationService.Instance.t("auth.password")).Replace("{min}", "8")
                    </div>
                }
                else if (showValidation && !IsPasswordComplex(model.Password))
                {
                    <div class="validation-message">
                        @LocalizationService.Instance.t("validation.passwordComplexity")
                    </div>
                }
            </div>
            
            <div class="form-group">
                <label>@LocalizationService.Instance.t("auth.confirmPassword")</label>
                <div class="password-input-wrapper">
                    <InputText type="@(showConfirmPassword ? "text" : "password")" @bind-Value="model.ConfirmPassword" class="form-control" placeholder="@LocalizationService.Instance.t("auth.confirmPassword")" disabled="@isSubmitting" />
                    <button type="button" class="password-toggle" @onclick="() => showConfirmPassword = !showConfirmPassword" disabled="@isSubmitting">
                        @if (showConfirmPassword)
                        {
                            <span>üëÅÔ∏è</span>
                        }
                        else
                        {
                            <span>üëÅÔ∏è‚Äçüó®Ô∏è</span>
                        }
                    </button>
                </div>
                @if (showValidation && string.IsNullOrEmpty(model.ConfirmPassword))
                {
                    <div class="validation-message">
                        @LocalizationService.Instance.t("validation.required").Replace("{field}", LocalizationService.Instance.t("auth.confirmPassword"))
                    </div>
                }
                else if (showValidation && model.Password != model.ConfirmPassword)
                {
                    <div class="validation-message">
                        @LocalizationService.Instance.t("validation.passwordMismatch")
                    </div>
                }
            </div>
            
            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="model.AgreeToTerms" class="form-check-input" id="agreeToTerms" disabled="@isSubmitting" />
                <label class="form-check-label" for="agreeToTerms">
                    @((MarkupString)LocalizationService.Instance.t("auth.agreeToTerms").Replace("{terms}", "<a href='/terms' target='_blank'>" + LocalizationService.Instance.t("auth.termsOfService") + "</a>").Replace("{privacy}", "<a href='/privacy' target='_blank'>" + LocalizationService.Instance.t("auth.privacyPolicy") + "</a>"))
                </label>
                @if (showValidation && !model.AgreeToTerms)
                {
                    <div class="validation-message">
                        @LocalizationService.Instance.t("validation.termsRequired")
                    </div>
                }
            </div>
            
            <button type="submit" class="btn btn-primary btn-block" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner" style="display: inline-block; width: 1rem; height: 1rem; border: 2px solid rgba(255,255,255,0.3); border-top-color: white; border-radius: 50%; animation: spin 0.6s linear infinite; margin-right: 0.5rem;"></span>
                    <span>@LocalizationService.Instance.t("auth.creatingAccount")...</span>
                }
                else
                {
                    <span>@LocalizationService.Instance.t("auth.signUp")</span>
                }
            </button>
            </EditForm>
            
            <div class="auth-footer">
                <p>
                    @LocalizationService.Instance.t("auth.alreadyHaveAccount") 
                    <a href="/signin@(GetQueryString())">@LocalizationService.Instance.t("auth.signIn")</a>
                </p>
            </div>
        }
    </div>
</div>

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem 0;
    }
    
    .auth-card {
        background: white;
        border-radius: 10px;
        padding: 2rem;
        box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 400px;
        margin: 2rem 0;
    }
    
    .auth-card h2 {
        margin-bottom: 1.5rem;
        color: #333;
        text-align: center;
    }
    
    .form-group {
        margin-bottom: 1rem;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #666;
        font-size: 0.9rem;
    }
    
    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 1rem;
    }
    
    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .form-text {
        font-size: 0.8rem;
        color: #6c757d;
        margin-top: 0.25rem;
    }
    
    .btn-primary {
        background: #667eea;
        color: white;
        border: none;
        padding: 0.75rem;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        width: 100%;
    }
    
    .btn-primary:hover:not(:disabled) {
        background: #5a67d8;
    }
    
    .btn-primary:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    
    .auth-footer {
        text-align: center;
        margin-top: 1.5rem;
        color: #666;
    }
    
    .auth-footer a {
        color: #667eea;
        text-decoration: none;
    }
    
    .auth-footer a:hover {
        text-decoration: underline;
    }
    
    .alert {
        padding: 0.75rem;
        border-radius: 5px;
        margin-bottom: 1rem;
    }
    
    .alert-danger {
        background: #fed7d7;
        color: #c53030;
        border: 1px solid #fc8181;
    }
    
    .alert-success {
        background: #c6f6d5;
        color: #276749;
        border: 1px solid #9ae6b4;
    }
    
    .alert-info {
        background: #bee3f8;
        color: #2c5282;
        border: 1px solid #90cdf4;
    }
    
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.2rem;
    }
    
    .form-check-label a {
        color: #667eea;
    }
    
    .password-input-wrapper {
        position: relative;
        display: flex;
        align-items: center;
    }
    
    .password-input-wrapper .form-control {
        padding-right: 2.5rem;
    }
    
    .password-toggle {
        position: absolute;
        right: 0.75rem;
        background: transparent;
        border: none;
        padding: 0.5rem;
        cursor: pointer;
        color: #666;
        font-size: 1.2rem;
        line-height: 1;
    }
    
    .password-toggle:hover:not(:disabled) {
        color: #333;
    }
    
    .password-toggle:disabled {
        cursor: not-allowed;
        opacity: 0.5;
    }
    
    /* Validation error styles */
    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
    
    .validation-errors {
        color: #dc3545;
    }
    
    .validation-summary {
        color: #dc3545;
    }
    
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

@code {
    private SignUpModel model = new();
    private bool isSubmitting = false;
    private string? errorMessage;
    private bool isSuccess = false;
    private bool mockMode = false;
    private bool skipEmail = false;
    private string selectedLang = "en";
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool showValidation = false;
    
    public class SignUpModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public bool AgreeToTerms { get; set; }
    }
    
    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrEmpty(email)) return false;
        return new EmailAddressAttribute().IsValid(email);
    }
    
    private bool IsPasswordComplex(string password)
    {
        if (string.IsNullOrEmpty(password)) return false;
        bool hasUpper = password.Any(char.IsUpper);
        bool hasLower = password.Any(char.IsLower);
        bool hasDigit = password.Any(char.IsDigit);
        return hasUpper && hasLower && hasDigit;
    }
    
    protected override void OnInitialized()
    {
        // Check for query parameters
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        if (query["mock"] == "true")
        {
            mockMode = true;
        }
        
        if (query["skipEmail"] == "true")
        {
            skipEmail = true;
        }
        
        if (!string.IsNullOrEmpty(query["lang"]))
        {
            selectedLang = query["lang"]!;
            LocalizationService.Instance.SetLanguage(selectedLang);
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if user is already authenticated
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                Navigation.NavigateTo("/console", forceLoad: true);
            }
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }
    
    private async Task HandleSignUp()
    {
        if (isSubmitting) return;
        
        showValidation = true;
        
        // Client-side validation
        if (string.IsNullOrEmpty(model.Email) || !IsValidEmail(model.Email) ||
            string.IsNullOrEmpty(model.Password) || model.Password.Length < 8 || !IsPasswordComplex(model.Password) ||
            string.IsNullOrEmpty(model.ConfirmPassword) || model.Password != model.ConfirmPassword ||
            !model.AgreeToTerms)
        {
            return;
        }
        
        isSubmitting = true;
        errorMessage = null;
        isSuccess = false;
        
        try
        {
            if (mockMode)
            {
                // Mock mode - simulate successful sign up
                await Task.Delay(1000); // Simulate network delay
                
                // Set language for mock mode
                var currentLang = LocalizationService.Instance.CurrentLanguage;
                if (!string.IsNullOrEmpty(selectedLang) && selectedLang != currentLang)
                {
                    LocalizationService.Instance.SetLanguage(selectedLang);
                }
                
                isSuccess = true;
            }
            else
            {
                // Real sign up with query parameters
                var options = new RequestOptions
                {
                    Lang = selectedLang,
                    SkipEmail = skipEmail
                };
                
                var result = await UserService.SignUpAsync(
                    model.Email,
                    model.Password,
                    options
                );
                
                if (result.Success)
                {
                    isSuccess = true;
                }
                else
                {
                    errorMessage = result.Message;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    
    private string GetQueryString()
    {
        var parameters = new List<string>();
        
        if (mockMode)
            parameters.Add("mock=true");
            
        if (skipEmail)
            parameters.Add("skipEmail=true");
            
        if (selectedLang != "en")
            parameters.Add($"lang={selectedLang}");
        
        return parameters.Any() ? "?" + string.Join("&", parameters) : "";
    }
}