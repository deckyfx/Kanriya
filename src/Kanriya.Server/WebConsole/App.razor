@inject NavigationManager NavigationManager

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<Router AppAssembly="@typeof(App).Assembly" PreferExactMatches="true">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        @{
            // Check if we're still in the initial load phase
            var path = new Uri(NavigationManager.Uri).LocalPath;
            var isInitialLoad = !_hasRendered && (path == "/console" || path == "/console/");
        }
        
        @if (isInitialLoad || !_hasRendered)
        {
            <!-- Initial load - show loading spinner -->
            <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: white; display: flex; align-items: center; justify-content: center;">
                <div style="text-align: center;">
                    <div style="width: 60px; height: 60px; margin: 0 auto 1rem; border: 4px solid #f3f3f3; border-top: 4px solid #1976d2; border-radius: 50%; animation: spin 1s linear infinite;">
                    </div>
                    <p style="color: #666; font-size: 14px;">Loading...</p>
                </div>
            </div>
        }
        else
        {
            <!-- Actually 404 - route doesn't exist -->
            <LayoutView Layout="@typeof(EmptyLayout)">
                <div style="padding: 2rem; text-align: center;">
                    <h1 style="font-size: 4rem; margin: 2rem 0;">404</h1>
                    <h2>Page Not Found</h2>
                    <p>Sorry, there's nothing at this address.</p>
                    <a href="/console" style="color: #1976d2; text-decoration: none;">‚Üê Back to Console</a>
                </div>
            </LayoutView>
        }
    </NotFound>
</Router>

<style>
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

@code {
    private bool _hasRendered = false;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100); // Small delay to ensure router has initialized
            _hasRendered = true;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}