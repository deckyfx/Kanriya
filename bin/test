#!/bin/bash

# Simple test runner for Kanriya Tests

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Load environment variables from .env
load_env() {
    if [ -f .env ]; then
        while IFS='=' read -r key value; do
            # Skip comments and empty lines
            if [[ ! "$key" =~ ^#.*$ ]] && [[ -n "$key" ]]; then
                # Skip UID and GID (readonly variables)
                if [[ "$key" != "UID" ]] && [[ "$key" != "GID" ]]; then
                    # Remove quotes from value if present
                    value="${value%\"}"
                    value="${value#\"}"
                    export "$key=$value"
                fi
            fi
        done < .env
    fi
}

# Load environment
load_env

# Check if server is running (just for user info, not to start it)
SERVER_PORT="${SERVER_LISTEN_PORT:-10000}"
if curl -s "http://localhost:$SERVER_PORT/graphql" > /dev/null 2>&1; then
    echo -e "${GREEN}✓ Server is running on port $SERVER_PORT${NC}"
else
    echo -e "${YELLOW}⚠ Server doesn't appear to be running on port $SERVER_PORT${NC}"
    echo -e "${YELLOW}  Please start the server with: ./bin/dev${NC}"
fi

echo ""

# Run the test program
echo -e "${GREEN}Running Kanriya Tests...${NC}"
echo ""

# Build the test project
echo "Building test project..."
dotnet build src/Kanriya.Tests/Kanriya.Tests.csproj -v q

if [ $? -ne 0 ]; then
    echo -e "${RED}✗ Build failed${NC}"
    exit 1
fi

# Run the tests
if [ -n "$1" ]; then
    # Run specific test scenario if provided
    dotnet run --project src/Kanriya.Tests/Kanriya.Tests.csproj -- "$1"
else
    # Run all test scenarios
    dotnet run --project src/Kanriya.Tests/Kanriya.Tests.csproj
fi

# Capture exit code
EXIT_CODE=$?

# Display result
echo ""
if [ $EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}✓ All tests completed successfully!${NC}"
else
    echo -e "${RED}✗ Some tests failed. Check output above.${NC}"
fi

exit $EXIT_CODE