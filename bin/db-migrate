#!/bin/bash

# Database Migration Helper Script
# Handles EF Core migrations with proper PATH setup

# Ensure .dotnet/tools is in PATH for this script
export PATH="$PATH:/home/decky/.dotnet/tools"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Change to project directory
cd "$(dirname "$0")/../src/GQLServer" || exit 1

# Function to check if dotnet ef is available
check_ef_tools() {
    if ! command -v dotnet-ef &> /dev/null && ! dotnet ef &> /dev/null; then
        echo -e "${YELLOW}EF Core tools not found. Installing...${NC}"
        dotnet tool install --global dotnet-ef
        echo -e "${GREEN}✓ EF Core tools installed${NC}"
    fi
}

# Function to show usage
show_usage() {
    echo "Database Migration Helper"
    echo "========================="
    echo ""
    echo "Usage: $0 [command] [options]"
    echo ""
    echo "Commands:"
    echo "  add <name>     Create a new migration with the given name"
    echo "  update         Apply pending migrations to database"
    echo "  remove         Remove the last migration"
    echo "  list           List all migrations"
    echo "  status         Show migration status"
    echo "  drop           Drop the database"
    echo "  reset          Drop and recreate database with all migrations"
    echo ""
    echo "Examples:"
    echo "  $0 add AddUserTable"
    echo "  $0 update"
    echo "  $0 reset"
}

# Check for EF tools
check_ef_tools

# Parse command
case "$1" in
    add)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Migration name required${NC}"
            echo "Usage: $0 add <MigrationName>"
            exit 1
        fi
        echo -e "${YELLOW}Creating migration: $2${NC}"
        dotnet ef migrations add "$2" --output-dir Data/Migrations
        echo -e "${GREEN}✓ Migration created${NC}"
        ;;
        
    update)
        echo -e "${YELLOW}Applying migrations to database...${NC}"
        dotnet ef database update
        echo -e "${GREEN}✓ Database updated${NC}"
        ;;
        
    remove)
        echo -e "${YELLOW}Removing last migration...${NC}"
        dotnet ef migrations remove
        echo -e "${GREEN}✓ Migration removed${NC}"
        ;;
        
    list)
        echo -e "${YELLOW}Listing migrations...${NC}"
        dotnet ef migrations list
        ;;
        
    status)
        echo -e "${YELLOW}Checking migration status...${NC}"
        dotnet ef migrations list
        echo ""
        echo -e "${YELLOW}Database info:${NC}"
        dotnet ef database list
        ;;
        
    drop)
        echo -e "${RED}Warning: This will drop the database!${NC}"
        read -p "Are you sure? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Dropping database...${NC}"
            dotnet ef database drop --force
            echo -e "${GREEN}✓ Database dropped${NC}"
        else
            echo "Cancelled"
        fi
        ;;
        
    reset)
        echo -e "${RED}Warning: This will drop and recreate the database!${NC}"
        read -p "Are you sure? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Resetting database...${NC}"
            dotnet ef database drop --force 2>/dev/null || true
            dotnet ef database update
            echo -e "${GREEN}✓ Database reset complete${NC}"
        else
            echo "Cancelled"
        fi
        ;;
        
    *)
        show_usage
        ;;
esac