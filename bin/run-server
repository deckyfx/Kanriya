#!/bin/bash

# GraphQL Server Runner with Database Management
# Ensures database is ready before starting the server

# Ensure .dotnet/tools is in PATH for this script
export PATH="$PATH:$HOME/.dotnet/tools"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Change to project directory
PROJECT_DIR="$(dirname "$0")/../src/Kanriya.Server"
cd "$PROJECT_DIR" || exit 1

# Function to check database status
check_database() {
    echo -e "${YELLOW}Checking database status...${NC}"
    
    # Check if there are pending migrations
    if dotnet ef migrations list | grep -q "(Pending)"; then
        echo -e "${YELLOW}Pending migrations detected${NC}"
        read -p "Apply migrations now? (Y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            echo -e "${YELLOW}Applying migrations...${NC}"
            if ! dotnet ef database update; then
                echo -e "${RED}✗ Migration failed!${NC}"
                echo -e "${RED}Please fix the migration issues before starting the server.${NC}"
                echo ""
                echo "Possible solutions:"
                echo "  1. Check your database connection in .env"
                echo "  2. Ensure PostgreSQL is running: docker-compose up -d"
                echo "  3. Review migration errors above"
                echo "  4. Use --skip-db flag to skip migrations (not recommended)"
                exit 1
            fi
            echo -e "${GREEN}✓ Migrations applied successfully${NC}"
        else
            echo -e "${YELLOW}⚠ Skipping migrations - database may not be up to date${NC}"
        fi
    else
        echo -e "${GREEN}✓ Database is up to date${NC}"
    fi
}

# Function to show server info
show_info() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Kanriya Server ${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Parse command line arguments
SKIP_DB_CHECK=false
WATCH_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --skip-db)
            SKIP_DB_CHECK=true
            shift
            ;;
        --watch)
            WATCH_MODE=true
            shift
            ;;
        --help)
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --skip-db    Skip database migration check"
            echo "  --watch      Run in watch mode (auto-restart on changes)"
            echo "  --help       Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Clear screen for clean output
clear

# Show server info
show_info

# Check database unless skipped
if [ "$SKIP_DB_CHECK" = false ]; then
    check_database
fi

# Build frontend assets
echo -e "${BLUE}Building frontend assets...${NC}"

# Check if node_modules exists, if not install dependencies
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}Installing npm dependencies...${NC}"
    npm install
fi

# Build all frontend assets (TypeScript, Webpack, CSS)
echo -e "${YELLOW}Building TypeScript, bundling JavaScript, and compiling CSS...${NC}"
if ! npm run build; then
    echo -e "${RED}✗ Frontend build failed!${NC}"
    echo -e "${RED}Please fix the build errors above before starting the server.${NC}"
    echo ""
    echo "Common solutions:"
    echo "  1. Check TypeScript errors in src/ts/ files"
    echo "  2. Ensure all npm dependencies are installed: npm install"
    echo "  3. Check for missing type definitions: npm i --save-dev @types/[package]"
    echo "  4. Review webpack configuration for any issues"
    exit 1
fi

echo -e "${GREEN}✓ Frontend assets built successfully${NC}"
echo ""

# Start the server
echo -e "${YELLOW}Starting GraphQL server...${NC}"
echo ""

if [ "$WATCH_MODE" = true ]; then
    echo -e "${YELLOW}Running in watch mode (auto-restart on file changes)${NC}"
    dotnet watch run
else
    dotnet run
fi