#!/bin/bash

# Kanriya Client Build Script
# Builds Avalonia client for multiple platforms

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"
CLIENT_PROJECT="$PROJECT_ROOT/src/Kanriya.Client.Avalonia"
OUTPUT_DIR="$PROJECT_ROOT/publish/client"

# Platform argument
PLATFORM=${1:-help}

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Function to build Windows
build_windows() {
    print_info "Building Windows x64..."
    dotnet publish "$CLIENT_PROJECT/Kanriya.Client.Avalonia.Desktop/Kanriya.Client.Avalonia.Desktop.csproj" \
        -c Release \
        -r win-x64 \
        --self-contained \
        -o "$OUTPUT_DIR/win-x64"
    
    # Create zip
    if command -v zip &> /dev/null; then
        print_info "Creating win-x64.zip..."
        cd "$OUTPUT_DIR"
        zip -qr win-x64.zip win-x64/
        cd "$PROJECT_ROOT"
        print_success "Windows build complete: $OUTPUT_DIR/win-x64.zip"
    else
        print_success "Windows build complete: $OUTPUT_DIR/win-x64/"
    fi
}

# Function to build Linux
build_linux() {
    print_info "Building Linux x64..."
    dotnet publish "$CLIENT_PROJECT/Kanriya.Client.Avalonia.Desktop/Kanriya.Client.Avalonia.Desktop.csproj" \
        -c Release \
        -r linux-x64 \
        --self-contained \
        -o "$OUTPUT_DIR/linux-x64"
    
    # Create zip
    if command -v zip &> /dev/null; then
        print_info "Creating linux-x64.zip..."
        cd "$OUTPUT_DIR"
        zip -qr linux-x64.zip linux-x64/
        cd "$PROJECT_ROOT"
        print_success "Linux build complete: $OUTPUT_DIR/linux-x64.zip"
    else
        print_success "Linux build complete: $OUTPUT_DIR/linux-x64/"
    fi
}

# Function to build macOS (ARM64 only - Apple Silicon)
build_macos() {
    print_info "Building macOS ARM64 (Apple Silicon)..."
    dotnet publish "$CLIENT_PROJECT/Kanriya.Client.Avalonia.Desktop/Kanriya.Client.Avalonia.Desktop.csproj" \
        -c Release \
        -r osx-arm64 \
        --self-contained \
        -o "$OUTPUT_DIR/osx-arm64"
    
    # Create zip
    if command -v zip &> /dev/null; then
        print_info "Creating osx-arm64.zip..."
        cd "$OUTPUT_DIR"
        zip -qr osx-arm64.zip osx-arm64/
        cd "$PROJECT_ROOT"
        print_success "macOS ARM64 build complete: $OUTPUT_DIR/osx-arm64.zip"
    else
        print_success "macOS ARM64 build complete: $OUTPUT_DIR/osx-arm64/"
    fi
}

# Function to build Web/Browser
build_web() {
    print_info "Building Web (WASM)..."
    dotnet publish "$CLIENT_PROJECT/Kanriya.Client.Avalonia.Browser/Kanriya.Client.Avalonia.Browser.csproj" \
        -c Release \
        -o "$OUTPUT_DIR/web"
    
    # Create zip
    if command -v zip &> /dev/null; then
        print_info "Creating web.zip..."
        cd "$OUTPUT_DIR"
        zip -qr web.zip web/
        cd "$PROJECT_ROOT"
        print_success "Web build complete: $OUTPUT_DIR/web.zip"
        print_info "Deploy contents of web/wwwroot/ to any static web host"
    else
        print_success "Web build complete: $OUTPUT_DIR/web/"
    fi
}

# Function to build Android
build_android() {
    print_info "Building Android APK..."
    
    # Check if Android workload is installed
    if ! dotnet workload list | grep -q "maui-android"; then
        print_error "Android workload not installed. Run: dotnet workload install maui-android"
        exit 1
    fi
    
    dotnet publish "$CLIENT_PROJECT/Kanriya.Client.Avalonia.Android/Kanriya.Client.Avalonia.Android.csproj" \
        -c Release \
        -o "$OUTPUT_DIR/android"
    
    # Find and copy the APK
    APK_PATH=$(find "$CLIENT_PROJECT/Kanriya.Client.Avalonia.Android" -name "*-Signed.apk" 2>/dev/null | head -1)
    if [ -n "$APK_PATH" ]; then
        cp "$APK_PATH" "$OUTPUT_DIR/Kanriya.apk"
        print_success "Android build complete: $OUTPUT_DIR/Kanriya.apk"
        
        # Check if adb is available and device connected
        if command -v adb &> /dev/null; then
            if adb devices | grep -q "device$"; then
                print_info "Android device detected. Install with: adb install $OUTPUT_DIR/Kanriya.apk"
            fi
        fi
    else
        print_warning "APK built but signed version not found in expected location"
        print_success "Android build complete: $OUTPUT_DIR/android/"
    fi
}

# Function to build iOS (requires Mac)
build_ios() {
    if [[ "$OSTYPE" != "darwin"* ]]; then
        print_error "iOS builds require macOS with Xcode installed"
        exit 1
    fi
    
    print_info "Building iOS..."
    dotnet publish "$CLIENT_PROJECT/Kanriya.Client.Avalonia.iOS/Kanriya.Client.Avalonia.iOS.csproj" \
        -c Release \
        -o "$OUTPUT_DIR/ios"
    
    print_success "iOS build complete: $OUTPUT_DIR/ios/"
    print_warning "iOS app requires signing with Apple Developer certificate for device installation"
}

# Function to build all platforms
build_all() {
    print_info "Building all platforms..."
    
    # Build desktop platforms
    build_windows
    build_linux
    build_macos
    
    # Build web
    build_web
    
    # Build mobile
    build_android
    
    # Try iOS if on Mac
    if [[ "$OSTYPE" == "darwin"* ]]; then
        build_ios
    else
        print_warning "Skipping iOS build (requires macOS)"
    fi
    
    print_success "All builds complete! Check $OUTPUT_DIR/"
}

# Function to clean build outputs
clean() {
    print_info "Cleaning build outputs..."
    rm -rf "$OUTPUT_DIR"
    rm -rf "$CLIENT_PROJECT/*/bin"
    rm -rf "$CLIENT_PROJECT/*/obj"
    print_success "Clean complete"
}

# Show help
show_help() {
    echo "Kanriya Client Build Script"
    echo ""
    echo "Usage: $0 [platform]"
    echo ""
    echo "Platforms:"
    echo "  windows    - Build for Windows (x64)"
    echo "  linux      - Build for Linux (x64)"
    echo "  macos      - Build for macOS ARM64 (Apple Silicon)"
    echo "  web        - Build for Web (WASM)"
    echo "  android    - Build for Android (APK)"
    echo "  ios        - Build for iOS (requires Mac)"
    echo "  all        - Build for all platforms"
    echo "  clean      - Remove all build outputs"
    echo ""
    echo "Examples:"
    echo "  $0 windows         # Build Windows x64"
    echo "  $0 macos           # Build macOS ARM64 (Apple Silicon)"
    echo "  $0 android         # Build Android APK"
    echo "  $0 all             # Build all platforms"
    echo ""
    echo "Output directory: $OUTPUT_DIR"
}

# Main execution
case $PLATFORM in
    windows)
        build_windows
        ;;
    linux)
        build_linux
        ;;
    macos|osx|mac)
        build_macos
        ;;
    web|browser|wasm)
        build_web
        ;;
    android|apk)
        build_android
        ;;
    ios|iphone|ipad)
        build_ios
        ;;
    all)
        build_all
        ;;
    clean)
        clean
        ;;
    help|--help|-h|*)
        show_help
        ;;
esac