#!/bin/bash

# Kanriya Development Environment Doctor
# Checks all dependencies and requirements for development

# Don't exit on error - we want to check everything
set +e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Status icons
CHECK="✓"
CROSS="✗"
WARN="⚠"
INFO="ℹ"

# Counters
ERRORS=0
WARNINGS=0

# Platform detection
OS="unknown"
ARCH="unknown"
DISTRO="unknown"

# Function to print colored output
print_header() {
    echo ""
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════════════════════${NC}"
    echo -e "${BOLD}${CYAN}  $1${NC}"
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════════════════════${NC}"
}

print_section() {
    echo ""
    echo -e "${BOLD}${MAGENTA}▶ $1${NC}"
    echo -e "${MAGENTA}────────────────────────────────────────${NC}"
}

print_success() {
    echo -e "  ${GREEN}${CHECK}${NC} $1"
}

print_error() {
    echo -e "  ${RED}${CROSS}${NC} $1"
    ((ERRORS++))
}

print_warning() {
    echo -e "  ${YELLOW}${WARN}${NC} $1"
    ((WARNINGS++))
}

print_info() {
    echo -e "  ${BLUE}${INFO}${NC} $1"
}

print_check() {
    echo -n -e "  Checking $1... "
}

# Detect OS and Architecture
detect_platform() {
    print_section "System Information"
    
    # Detect OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        # Detect Linux distribution
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            DISTRO=$NAME
        elif command -v lsb_release &> /dev/null; then
            DISTRO=$(lsb_release -si)
        else
            DISTRO="Unknown Linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        DISTRO="macOS $(sw_vers -productVersion 2>/dev/null || echo 'Unknown')"
    elif [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
        OS="windows"
        DISTRO="Windows"
    elif [[ "$OSTYPE" == "freebsd"* ]]; then
        OS="freebsd"
        DISTRO="FreeBSD"
    else
        OS="unknown"
    fi
    
    # Detect Architecture
    ARCH=$(uname -m)
    case $ARCH in
        x86_64|amd64)
            ARCH="x64"
            ;;
        aarch64|arm64)
            ARCH="arm64"
            ;;
        armv7l|armhf)
            ARCH="arm"
            ;;
        i386|i686)
            ARCH="x86"
            ;;
    esac
    
    print_info "Operating System: ${BOLD}$DISTRO${NC}"
    print_info "Architecture: ${BOLD}$ARCH${NC}"
    print_info "Platform: ${BOLD}$OS-$ARCH${NC}"
    print_info "Hostname: ${BOLD}$(hostname)${NC}"
    print_info "User: ${BOLD}$USER${NC}"
    
    # Check if running in container
    if [ -f /.dockerenv ]; then
        print_warning "Running inside Docker container"
    fi
    
    if [ -f /run/.containerenv ]; then
        print_warning "Running inside Podman container"
    fi
}

# Check command existence and version
check_command() {
    local cmd=$1
    local version_flag=${2:---version}
    local min_version=$3
    local install_hint=$4
    
    print_check "$cmd"
    
    if command -v $cmd &> /dev/null; then
        local version=$($cmd $version_flag 2>&1 | head -n 1)
        echo -e "${GREEN}${CHECK}${NC}"
        print_success "$cmd: $version"
        
        # Version comparison if minimum version specified
        if [ -n "$min_version" ]; then
            # Extract version number (basic extraction, may need adjustment per tool)
            local current_version=$(echo "$version" | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -1)
            if [ -n "$current_version" ]; then
                if ! version_compare "$current_version" "$min_version"; then
                    print_warning "  Minimum version $min_version required, you have $current_version"
                fi
            fi
        fi
    else
        echo -e "${RED}${CROSS}${NC}"
        print_error "$cmd not found"
        if [ -n "$install_hint" ]; then
            print_info "  Install: $install_hint"
        fi
    fi
}

# Simple version comparison (returns 0 if $1 >= $2)
version_compare() {
    [ "$(printf '%s\n' "$1" "$2" | sort -V | head -n 1)" = "$2" ]
}

# Check .NET SDK and workloads
check_dotnet() {
    print_section ".NET SDK & Workloads"
    
    if command -v dotnet &> /dev/null; then
        local dotnet_version=$(dotnet --version)
        print_success ".NET SDK: $dotnet_version"
        
        # Check for .NET 9.0
        if [[ $dotnet_version == 9.* ]]; then
            print_success ".NET 9.0 SDK detected"
        else
            print_warning ".NET 9.0 SDK recommended (you have $dotnet_version)"
        fi
        
        # List installed SDKs
        echo -e "\n  ${BOLD}Installed SDKs:${NC}"
        dotnet --list-sdks | while read -r line; do
            echo "    • $line"
        done
        
        # Check workloads
        echo -e "\n  ${BOLD}Checking workloads:${NC}"
        
        # Check specific workloads
        local workloads=("wasm-tools" "maui-android" "maui-ios" "aspire")
        for workload in "${workloads[@]}"; do
            if dotnet workload list | grep -q "$workload"; then
                print_success "$workload installed"
            else
                print_warning "$workload not installed"
                print_info "  Install: dotnet workload install $workload"
            fi
        done
        
    else
        print_error ".NET SDK not found"
        case $OS in
            linux)
                print_info "  Install: https://dotnet.microsoft.com/download/dotnet/9.0"
                print_info "  Or: wget https://dot.net/v1/dotnet-install.sh && chmod +x dotnet-install.sh && ./dotnet-install.sh --version 9.0"
                ;;
            macos)
                print_info "  Install: brew install dotnet"
                print_info "  Or: https://dotnet.microsoft.com/download/dotnet/9.0"
                ;;
            windows)
                print_info "  Install: https://dotnet.microsoft.com/download/dotnet/9.0"
                ;;
        esac
    fi
}

# Function to check development tools (consolidated)
check_development_tools() {
    print_section "Development Tools"
    
    # Docker & Docker Compose
    print_check "Docker"
    if command -v docker &> /dev/null; then
        local docker_version=$(docker --version)
        echo -e "${GREEN}${CHECK}${NC}"
        print_success "Docker: $docker_version"
    else
        echo -e "${RED}${CROSS}${NC}"
        print_error "Docker not found (REQUIRED for PostgreSQL database)"
        print_info "  Install: https://docs.docker.com/get-docker/"
    fi
    
    print_check "Docker Compose"
    if command -v docker &> /dev/null && docker compose version &> /dev/null; then
        local compose_version=$(docker compose version)
        echo -e "${GREEN}${CHECK}${NC}"
        print_success "Docker Compose: $compose_version"
    else
        echo -e "${YELLOW}${WARN}${NC}"
        print_warning "Docker Compose not found"
        print_info "  Docker Compose is included with Docker Desktop"
    fi
    
    # Git
    print_check "Git"
    if command -v git &> /dev/null; then
        local git_version=$(git --version)
        echo -e "${GREEN}${CHECK}${NC}"
        print_success "Git: $git_version"
    else
        echo -e "${RED}${CROSS}${NC}"
        print_error "Git not found (REQUIRED for version control)"
        print_info "  Install: sudo apt install git"
    fi
    
    # Zip
    print_check "Zip"
    if command -v zip &> /dev/null; then
        local zip_version=$(zip -v 2>&1 | head -n 2 | tail -n 1)
        echo -e "${GREEN}${CHECK}${NC}"
        print_success "Zip available (for packaging builds)"
    else
        echo -e "${YELLOW}${WARN}${NC}"
        print_warning "Zip not found (optional, for creating archives)"
        print_info "  Install: sudo apt install zip"
    fi
    
    # Node.js
    print_check "Node.js"
    if command -v node &> /dev/null; then
        local node_version=$(node --version)
        echo -e "${GREEN}${CHECK}${NC}"
        print_success "Node.js: $node_version"
    else
        echo -e "${YELLOW}${WARN}${NC}"
        print_warning "Node.js not found (optional, for web tooling)"
        case $OS in
            linux|macos)
                print_info "  Install: https://nodejs.org/ or use nvm"
                ;;
        esac
    fi
    
    # npm
    print_check "npm"
    if command -v npm &> /dev/null; then
        local npm_version=$(npm --version)
        echo -e "${GREEN}${CHECK}${NC}"
        print_success "npm: $npm_version"
    else
        echo -e "${YELLOW}${WARN}${NC}"
        print_warning "npm not found (Node package manager)"
    fi
}

# Check mobile development tools
check_mobile_tools() {
    print_section "Mobile Development Tools"
    
    # Check Android SDK
    echo -e "\n  ${BOLD}Android Development:${NC}"
    
    # Check Java (required for Android)
    print_check "Java (JDK 17+)"
    if command -v java &> /dev/null; then
        local java_version=$(java -version 2>&1 | head -n 1)
        echo -e "${GREEN}${CHECK}${NC}"
        print_success "Java: $java_version"
        
        # Check if it's JDK 17 or higher
        if echo "$java_version" | grep -qE "version \"(17|18|19|20|21)"; then
            print_success "JDK version compatible with Android development"
        else
            print_warning "JDK 17+ recommended for Android development"
        fi
    else
        echo -e "${YELLOW}${WARN}${NC}"
        print_warning "Java JDK not found (REQUIRED for Android builds)"
        case $OS in
            linux)
                print_info "  Install: sudo apt install openjdk-17-jdk (Ubuntu/Debian)"
                print_info "  Or: sudo dnf install java-17-openjdk (Fedora)"
                ;;
            macos)
                print_info "  Install: brew install openjdk@17"
                ;;
        esac
    fi
    
    # Check Android SDK
    print_check "Android SDK"
    if [ -n "$ANDROID_HOME" ] || [ -n "$ANDROID_SDK_ROOT" ]; then
        local android_home=${ANDROID_HOME:-$ANDROID_SDK_ROOT}
        echo -e "${GREEN}${CHECK}${NC}"
        print_success "Android SDK path: $android_home"
        
        # Check SDK components
        if [ -d "$android_home/platforms" ] && [ "$(ls -A $android_home/platforms)" ]; then
            print_success "Android platforms installed"
        else
            print_warning "No Android platforms found. Install via Android Studio SDK Manager"
        fi
        
        if [ -d "$android_home/build-tools" ] && [ "$(ls -A $android_home/build-tools)" ]; then
            print_success "Android build-tools installed"
        else
            print_warning "No build-tools found. Install via Android Studio SDK Manager"
        fi
        
        # Check ADB
        if command -v adb &> /dev/null; then
            local adb_version=$(adb version | head -n 1)
            print_success "ADB: $adb_version"
            
            # Check for connected devices
            if adb devices | grep -q "device$"; then
                print_success "Android device/emulator connected"
            else
                print_info "No Android devices connected (use 'adb devices' to check)"
            fi
        else
            print_warning "ADB not found in PATH"
            print_info "  Add to PATH: export PATH=\$PATH:$android_home/platform-tools"
        fi
    else
        echo -e "${YELLOW}${WARN}${NC}"
        print_warning "Android SDK not configured (REQUIRED for Android builds)"
        print_info "  Install Android Studio: https://developer.android.com/studio"
        print_info "  Then set: export ANDROID_HOME=/path/to/android/sdk"
        print_info "  Or set: export ANDROID_SDK_ROOT=/path/to/android/sdk"
    fi
    
    # Check Android workload in .NET
    if command -v dotnet &> /dev/null; then
        if dotnet workload list | grep -q "maui-android"; then
            print_success ".NET Android workload installed"
        else
            print_warning ".NET Android workload not installed"
            print_info "  Install: dotnet workload install maui-android"
        fi
    fi
    
    # Check iOS tools (macOS only)
    if [[ "$OS" == "macos" ]]; then
        echo -e "\n  ${BOLD}iOS Development:${NC}"
        
        # Check Xcode
        print_check "Xcode"
        if command -v xcodebuild &> /dev/null; then
            local xcode_version=$(xcodebuild -version | head -n 1)
            echo -e "${GREEN}${CHECK}${NC}"
            print_success "Xcode: $xcode_version"
        else
            echo -e "${YELLOW}${WARN}${NC}"
            print_warning "Xcode not found (required for iOS development)"
            print_info "  Install from Mac App Store"
        fi
        
        # Check CocoaPods
        print_check "CocoaPods"
        if command -v pod &> /dev/null; then
            local pod_version=$(pod --version)
            echo -e "${GREEN}${CHECK}${NC}"
            print_success "CocoaPods: $pod_version"
        else
            echo -e "${YELLOW}${WARN}${NC}"
            print_warning "CocoaPods not found"
            print_info "  Install: sudo gem install cocoapods"
        fi
        
        # Check iOS workload
        if command -v dotnet &> /dev/null; then
            if dotnet workload list | grep -q "maui-ios"; then
                print_success ".NET iOS workload installed"
            else
                print_warning ".NET iOS workload not installed"
                print_info "  Install: dotnet workload install maui-ios"
            fi
        fi
    else
        echo -e "\n  ${BOLD}iOS Development:${NC}"
        print_warning "iOS apps can ONLY be built on macOS with Xcode"
        print_info "You're on $OS - iOS builds are not possible from this platform"
    fi
}

# Check desktop platform requirements
check_desktop_platforms() {
    print_section "Desktop Platform Requirements"
    
    echo -e "\n  ${BOLD}Windows Build Requirements:${NC}"
    if command -v dotnet &> /dev/null; then
        print_success "Can build Windows apps from any OS with .NET SDK"
        print_info "Windows builds create self-contained .exe files"
    else
        print_error ".NET SDK required for Windows builds"
    fi
    
    echo -e "\n  ${BOLD}Linux Build Requirements:${NC}"
    if command -v dotnet &> /dev/null; then
        print_success "Can build Linux apps from any OS with .NET SDK"
        if [[ "$OS" == "linux" ]]; then
            # Check for required runtime libraries
            print_check "libicu"
            if ldconfig -p | grep -q libicuuc; then
                echo -e "${GREEN}${CHECK}${NC}"
                print_success "ICU libraries installed (required at runtime)"
            else
                echo -e "${YELLOW}${WARN}${NC}"
                print_warning "ICU libraries not found"
                print_info "  Install: sudo apt install libicu-dev (Ubuntu/Debian)"
            fi
        fi
    else
        print_error ".NET SDK required for Linux builds"
    fi
    
    echo -e "\n  ${BOLD}macOS Desktop Build Requirements:${NC}"
    if command -v dotnet &> /dev/null; then
        print_success "Can build macOS desktop apps (.app) from any OS with .NET SDK"
        if [[ "$OS" == "macos" ]]; then
            print_info "For notarization and App Store: Requires Apple Developer account"
        else
            print_info "Note: Building from $OS creates unsigned .app bundle"
            print_info "Code signing and notarization requires macOS"
        fi
    else
        print_error ".NET SDK required for macOS desktop builds"
    fi
    
    echo -e "\n  ${BOLD}Web (WASM) Build Requirements:${NC}"
    if command -v dotnet &> /dev/null; then
        if dotnet workload list | grep -q "wasm-tools"; then
            print_success "WASM tools workload installed"
            print_info "Web builds create static files deployable to any web server"
        else
            print_warning "WASM tools not installed"
            print_info "  Install: dotnet workload install wasm-tools"
        fi
    else
        print_error ".NET SDK required for Web builds"
    fi
}


# Check Avalonia specific requirements
check_avalonia() {
    print_section "Avalonia UI Requirements"
    
    # Check for GUI support
    case $OS in
        linux)
            # Check X11 or Wayland
            if [ -n "$DISPLAY" ] || [ -n "$WAYLAND_DISPLAY" ]; then
                print_success "GUI environment detected"
            else
                print_warning "No GUI environment detected (running headless?)"
            fi
            
            # Check required libraries
            print_check "GTK+"
            if pkg-config --exists gtk+-3.0 2>/dev/null; then
                echo -e "${GREEN}${CHECK}${NC}"
                print_success "GTK+ 3.0 available"
            else
                echo -e "${YELLOW}${WARN}${NC}"
                print_warning "GTK+ 3.0 not found"
                print_info "  Install: sudo apt install libgtk-3-0 (Ubuntu/Debian)"
            fi
            ;;
        macos)
            print_success "macOS GUI support available"
            ;;
        windows)
            print_success "Windows GUI support available"
            ;;
    esac
    
    # Check Avalonia templates
    if command -v dotnet &> /dev/null; then
        if dotnet new list | grep -q "avalonia"; then
            print_success "Avalonia templates installed"
        else
            print_warning "Avalonia templates not installed"
            print_info "  Install: dotnet new install Avalonia.Templates"
        fi
    fi
}

# Check project-specific files
check_project() {
    print_section "Project Status"
    
    # Check if we're in the project root
    if [ -f "Kanriya.sln" ]; then
        print_success "In Kanriya project root"
        
        # Check important files
        [ -f ".env" ] && print_success ".env file exists" || print_warning ".env file not found (copy from .env.example)"
        [ -f "docker-compose.yml" ] && print_success "docker-compose.yml exists" || print_warning "docker-compose.yml not found"
        
        # Check if packages are restored
        if [ -d "src/Kanriya.Server/obj" ]; then
            print_success "NuGet packages appear to be restored"
        else
            print_info "Run 'dotnet restore' to restore NuGet packages"
        fi
    else
        print_warning "Not in Kanriya project root directory"
    fi
}

# Generate summary
generate_summary() {
    print_header "Diagnostic Summary"
    
    if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
        echo -e "\n  ${GREEN}${CHECK} All checks passed!${NC}"
        echo -e "  ${GREEN}Your environment is ready for Kanriya development.${NC}"
    else
        echo ""
        if [ $ERRORS -gt 0 ]; then
            echo -e "  ${RED}${CROSS} $ERRORS error(s) found${NC}"
        fi
        if [ $WARNINGS -gt 0 ]; then
            echo -e "  ${YELLOW}${WARN} $WARNINGS warning(s) found${NC}"
        fi
        echo ""
        echo -e "  ${YELLOW}Please address the issues above for optimal development experience.${NC}"
    fi
    
    echo ""
    echo -e "${CYAN}═══════════════════════════════════════════════════════${NC}"
    
    # Platform-specific recommendations
    echo -e "\n${BOLD}Quick Start Commands:${NC}"
    echo ""
    case $OS in
        linux)
            echo "  # Install dependencies (Ubuntu/Debian):"
            echo "  sudo apt update"
            echo "  sudo apt install -y git zip docker.io docker-compose"
            echo "  wget https://dot.net/v1/dotnet-install.sh"
            echo "  chmod +x dotnet-install.sh && ./dotnet-install.sh --version 9.0"
            ;;
        macos)
            echo "  # Install dependencies (using Homebrew):"
            echo "  brew install git zip docker dotnet"
            echo "  # Install Xcode from Mac App Store for iOS development"
            ;;
    esac
    
    echo ""
    echo "  # Install .NET workloads:"
    echo "  dotnet workload install wasm-tools maui-android"
    if [[ "$OS" == "macos" ]]; then
        echo "  dotnet workload install maui-ios"
    fi
    
    echo ""
    echo "  # Clone and setup project:"
    echo "  git clone [repository-url]"
    echo "  cd Kanriya"
    echo "  cp .env.example .env"
    echo "  docker-compose up -d"
    echo "  dotnet restore"
    echo "  ./bin/run-server"
}

# Main execution
main() {
    # Don't clear if --no-clear flag is passed
    if [[ "$1" != "--no-clear" ]]; then
        clear
    fi
    
    print_header "Kanriya Development Environment Doctor"
    echo -e "${CYAN}  Checking your development environment...${NC}"
    
    detect_platform
    check_dotnet
    check_development_tools
    check_desktop_platforms
    check_mobile_tools
    check_avalonia
    check_project
    
    generate_summary
}

# Check for help flag
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    echo "Kanriya Development Environment Doctor"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --help, -h     Show this help message"
    echo "  --no-clear     Don't clear the screen before running"
    echo ""
    echo "This script checks all dependencies required for Kanriya development"
    echo "including Docker, .NET SDK, mobile SDKs, and build tools."
    exit 0
fi

# Run main function with arguments
main "$@"